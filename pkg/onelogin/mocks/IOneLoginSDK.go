// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	models "github.com/onelogin/onelogin-go-sdk/v4/pkg/onelogin/models"
	mock "github.com/stretchr/testify/mock"
)

// IOneLoginSDK is an autogenerated mock type for the IOneLoginSDK type
type IOneLoginSDK struct {
	mock.Mock
}

type IOneLoginSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *IOneLoginSDK) EXPECT() *IOneLoginSDK_Expecter {
	return &IOneLoginSDK_Expecter{mock: &_m.Mock}
}

// ActivateMFAFactor provides a mock function with given fields: userID, request
func (_m *IOneLoginSDK) ActivateMFAFactor(userID int, request models.ActivateFactorRequest) (interface{}, error) {
	ret := _m.Called(userID, request)

	if len(ret) == 0 {
		panic("no return value specified for ActivateMFAFactor")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.ActivateFactorRequest) (interface{}, error)); ok {
		return rf(userID, request)
	}
	if rf, ok := ret.Get(0).(func(int, models.ActivateFactorRequest) interface{}); ok {
		r0 = rf(userID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.ActivateFactorRequest) error); ok {
		r1 = rf(userID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ActivateMFAFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateMFAFactor'
type IOneLoginSDK_ActivateMFAFactor_Call struct {
	*mock.Call
}

// ActivateMFAFactor is a helper method to define mock.On call
//   - userID int
//   - request models.ActivateFactorRequest
func (_e *IOneLoginSDK_Expecter) ActivateMFAFactor(userID interface{}, request interface{}) *IOneLoginSDK_ActivateMFAFactor_Call {
	return &IOneLoginSDK_ActivateMFAFactor_Call{Call: _e.mock.On("ActivateMFAFactor", userID, request)}
}

func (_c *IOneLoginSDK_ActivateMFAFactor_Call) Run(run func(userID int, request models.ActivateFactorRequest)) *IOneLoginSDK_ActivateMFAFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.ActivateFactorRequest))
	})
	return _c
}

func (_c *IOneLoginSDK_ActivateMFAFactor_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ActivateMFAFactor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ActivateMFAFactor_Call) RunAndReturn(run func(int, models.ActivateFactorRequest) (interface{}, error)) *IOneLoginSDK_ActivateMFAFactor_Call {
	_c.Call.Return(run)
	return _c
}

// AddPrivilegeToRole provides a mock function with given fields: privilegeID, roleID
func (_m *IOneLoginSDK) AddPrivilegeToRole(privilegeID string, roleID int) (interface{}, error) {
	ret := _m.Called(privilegeID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AddPrivilegeToRole")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (interface{}, error)); ok {
		return rf(privilegeID, roleID)
	}
	if rf, ok := ret.Get(0).(func(string, int) interface{}); ok {
		r0 = rf(privilegeID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(privilegeID, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_AddPrivilegeToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPrivilegeToRole'
type IOneLoginSDK_AddPrivilegeToRole_Call struct {
	*mock.Call
}

// AddPrivilegeToRole is a helper method to define mock.On call
//   - privilegeID string
//   - roleID int
func (_e *IOneLoginSDK_Expecter) AddPrivilegeToRole(privilegeID interface{}, roleID interface{}) *IOneLoginSDK_AddPrivilegeToRole_Call {
	return &IOneLoginSDK_AddPrivilegeToRole_Call{Call: _e.mock.On("AddPrivilegeToRole", privilegeID, roleID)}
}

func (_c *IOneLoginSDK_AddPrivilegeToRole_Call) Run(run func(privilegeID string, roleID int)) *IOneLoginSDK_AddPrivilegeToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_AddPrivilegeToRole_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_AddPrivilegeToRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_AddPrivilegeToRole_Call) RunAndReturn(run func(string, int) (interface{}, error)) *IOneLoginSDK_AddPrivilegeToRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoleAdmins provides a mock function with given fields: roleID
func (_m *IOneLoginSDK) AddRoleAdmins(roleID int) (interface{}, error) {
	ret := _m.Called(roleID)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleAdmins")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(roleID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_AddRoleAdmins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoleAdmins'
type IOneLoginSDK_AddRoleAdmins_Call struct {
	*mock.Call
}

// AddRoleAdmins is a helper method to define mock.On call
//   - roleID int
func (_e *IOneLoginSDK_Expecter) AddRoleAdmins(roleID interface{}) *IOneLoginSDK_AddRoleAdmins_Call {
	return &IOneLoginSDK_AddRoleAdmins_Call{Call: _e.mock.On("AddRoleAdmins", roleID)}
}

func (_c *IOneLoginSDK_AddRoleAdmins_Call) Run(run func(roleID int)) *IOneLoginSDK_AddRoleAdmins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_AddRoleAdmins_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_AddRoleAdmins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_AddRoleAdmins_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_AddRoleAdmins_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoleUsers provides a mock function with given fields: roleID, users
func (_m *IOneLoginSDK) AddRoleUsers(roleID int, users []int) (interface{}, error) {
	ret := _m.Called(roleID, users)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleUsers")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []int) (interface{}, error)); ok {
		return rf(roleID, users)
	}
	if rf, ok := ret.Get(0).(func(int, []int) interface{}); ok {
		r0 = rf(roleID, users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, []int) error); ok {
		r1 = rf(roleID, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_AddRoleUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoleUsers'
type IOneLoginSDK_AddRoleUsers_Call struct {
	*mock.Call
}

// AddRoleUsers is a helper method to define mock.On call
//   - roleID int
//   - users []int
func (_e *IOneLoginSDK_Expecter) AddRoleUsers(roleID interface{}, users interface{}) *IOneLoginSDK_AddRoleUsers_Call {
	return &IOneLoginSDK_AddRoleUsers_Call{Call: _e.mock.On("AddRoleUsers", roleID, users)}
}

func (_c *IOneLoginSDK_AddRoleUsers_Call) Run(run func(roleID int, users []int)) *IOneLoginSDK_AddRoleUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]int))
	})
	return _c
}

func (_c *IOneLoginSDK_AddRoleUsers_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_AddRoleUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_AddRoleUsers_Call) RunAndReturn(run func(int, []int) (interface{}, error)) *IOneLoginSDK_AddRoleUsers_Call {
	_c.Call.Return(run)
	return _c
}

// AssignRolesToUser provides a mock function with given fields: userID, roles
func (_m *IOneLoginSDK) AssignRolesToUser(userID int, roles []int) (interface{}, error) {
	ret := _m.Called(userID, roles)

	if len(ret) == 0 {
		panic("no return value specified for AssignRolesToUser")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []int) (interface{}, error)); ok {
		return rf(userID, roles)
	}
	if rf, ok := ret.Get(0).(func(int, []int) interface{}); ok {
		r0 = rf(userID, roles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, []int) error); ok {
		r1 = rf(userID, roles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_AssignRolesToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRolesToUser'
type IOneLoginSDK_AssignRolesToUser_Call struct {
	*mock.Call
}

// AssignRolesToUser is a helper method to define mock.On call
//   - userID int
//   - roles []int
func (_e *IOneLoginSDK_Expecter) AssignRolesToUser(userID interface{}, roles interface{}) *IOneLoginSDK_AssignRolesToUser_Call {
	return &IOneLoginSDK_AssignRolesToUser_Call{Call: _e.mock.On("AssignRolesToUser", userID, roles)}
}

func (_c *IOneLoginSDK_AssignRolesToUser_Call) Run(run func(userID int, roles []int)) *IOneLoginSDK_AssignRolesToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]int))
	})
	return _c
}

func (_c *IOneLoginSDK_AssignRolesToUser_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_AssignRolesToUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_AssignRolesToUser_Call) RunAndReturn(run func(int, []int) (interface{}, error)) *IOneLoginSDK_AssignRolesToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssignUsersToPrivilege provides a mock function with given fields: privilegeID, userIds
func (_m *IOneLoginSDK) AssignUsersToPrivilege(privilegeID string, userIds []int) (interface{}, error) {
	ret := _m.Called(privilegeID, userIds)

	if len(ret) == 0 {
		panic("no return value specified for AssignUsersToPrivilege")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []int) (interface{}, error)); ok {
		return rf(privilegeID, userIds)
	}
	if rf, ok := ret.Get(0).(func(string, []int) interface{}); ok {
		r0 = rf(privilegeID, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, []int) error); ok {
		r1 = rf(privilegeID, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_AssignUsersToPrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignUsersToPrivilege'
type IOneLoginSDK_AssignUsersToPrivilege_Call struct {
	*mock.Call
}

// AssignUsersToPrivilege is a helper method to define mock.On call
//   - privilegeID string
//   - userIds []int
func (_e *IOneLoginSDK_Expecter) AssignUsersToPrivilege(privilegeID interface{}, userIds interface{}) *IOneLoginSDK_AssignUsersToPrivilege_Call {
	return &IOneLoginSDK_AssignUsersToPrivilege_Call{Call: _e.mock.On("AssignUsersToPrivilege", privilegeID, userIds)}
}

func (_c *IOneLoginSDK_AssignUsersToPrivilege_Call) Run(run func(privilegeID string, userIds []int)) *IOneLoginSDK_AssignUsersToPrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]int))
	})
	return _c
}

func (_c *IOneLoginSDK_AssignUsersToPrivilege_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_AssignUsersToPrivilege_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_AssignUsersToPrivilege_Call) RunAndReturn(run func(string, []int) (interface{}, error)) *IOneLoginSDK_AssignUsersToPrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// BulkSortMappings provides a mock function with given fields: mappingIDs
func (_m *IOneLoginSDK) BulkSortMappings(mappingIDs []int) (interface{}, error) {
	ret := _m.Called(mappingIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkSortMappings")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) (interface{}, error)); ok {
		return rf(mappingIDs)
	}
	if rf, ok := ret.Get(0).(func([]int) interface{}); ok {
		r0 = rf(mappingIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(mappingIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_BulkSortMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkSortMappings'
type IOneLoginSDK_BulkSortMappings_Call struct {
	*mock.Call
}

// BulkSortMappings is a helper method to define mock.On call
//   - mappingIDs []int
func (_e *IOneLoginSDK_Expecter) BulkSortMappings(mappingIDs interface{}) *IOneLoginSDK_BulkSortMappings_Call {
	return &IOneLoginSDK_BulkSortMappings_Call{Call: _e.mock.On("BulkSortMappings", mappingIDs)}
}

func (_c *IOneLoginSDK_BulkSortMappings_Call) Run(run func(mappingIDs []int)) *IOneLoginSDK_BulkSortMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *IOneLoginSDK_BulkSortMappings_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_BulkSortMappings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_BulkSortMappings_Call) RunAndReturn(run func([]int) (interface{}, error)) *IOneLoginSDK_BulkSortMappings_Call {
	_c.Call.Return(run)
	return _c
}

// CreateApp provides a mock function with given fields: app
func (_m *IOneLoginSDK) CreateApp(app models.App) (interface{}, error) {
	ret := _m.Called(app)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.App) (interface{}, error)); ok {
		return rf(app)
	}
	if rf, ok := ret.Get(0).(func(models.App) interface{}); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.App) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApp'
type IOneLoginSDK_CreateApp_Call struct {
	*mock.Call
}

// CreateApp is a helper method to define mock.On call
//   - app models.App
func (_e *IOneLoginSDK_Expecter) CreateApp(app interface{}) *IOneLoginSDK_CreateApp_Call {
	return &IOneLoginSDK_CreateApp_Call{Call: _e.mock.On("CreateApp", app)}
}

func (_c *IOneLoginSDK_CreateApp_Call) Run(run func(app models.App)) *IOneLoginSDK_CreateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.App))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateApp_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateApp_Call) RunAndReturn(run func(models.App) (interface{}, error)) *IOneLoginSDK_CreateApp_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAppRule provides a mock function with given fields: id, appRule
func (_m *IOneLoginSDK) CreateAppRule(id int, appRule models.AppRule) (interface{}, error) {
	ret := _m.Called(id, appRule)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppRule")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.AppRule) (interface{}, error)); ok {
		return rf(id, appRule)
	}
	if rf, ok := ret.Get(0).(func(int, models.AppRule) interface{}); ok {
		r0 = rf(id, appRule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.AppRule) error); ok {
		r1 = rf(id, appRule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateAppRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppRule'
type IOneLoginSDK_CreateAppRule_Call struct {
	*mock.Call
}

// CreateAppRule is a helper method to define mock.On call
//   - id int
//   - appRule models.AppRule
func (_e *IOneLoginSDK_Expecter) CreateAppRule(id interface{}, appRule interface{}) *IOneLoginSDK_CreateAppRule_Call {
	return &IOneLoginSDK_CreateAppRule_Call{Call: _e.mock.On("CreateAppRule", id, appRule)}
}

func (_c *IOneLoginSDK_CreateAppRule_Call) Run(run func(id int, appRule models.AppRule)) *IOneLoginSDK_CreateAppRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.AppRule))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateAppRule_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateAppRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateAppRule_Call) RunAndReturn(run func(int, models.AppRule) (interface{}, error)) *IOneLoginSDK_CreateAppRule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthServer provides a mock function with given fields: authServer
func (_m *IOneLoginSDK) CreateAuthServer(authServer *models.AuthServer) (interface{}, error) {
	ret := _m.Called(authServer)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthServer")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.AuthServer) (interface{}, error)); ok {
		return rf(authServer)
	}
	if rf, ok := ret.Get(0).(func(*models.AuthServer) interface{}); ok {
		r0 = rf(authServer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*models.AuthServer) error); ok {
		r1 = rf(authServer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateAuthServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthServer'
type IOneLoginSDK_CreateAuthServer_Call struct {
	*mock.Call
}

// CreateAuthServer is a helper method to define mock.On call
//   - authServer *models.AuthServer
func (_e *IOneLoginSDK_Expecter) CreateAuthServer(authServer interface{}) *IOneLoginSDK_CreateAuthServer_Call {
	return &IOneLoginSDK_CreateAuthServer_Call{Call: _e.mock.On("CreateAuthServer", authServer)}
}

func (_c *IOneLoginSDK_CreateAuthServer_Call) Run(run func(authServer *models.AuthServer)) *IOneLoginSDK_CreateAuthServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.AuthServer))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateAuthServer_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateAuthServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateAuthServer_Call) RunAndReturn(run func(*models.AuthServer) (interface{}, error)) *IOneLoginSDK_CreateAuthServer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthServerClaim provides a mock function with given fields: id, claim
func (_m *IOneLoginSDK) CreateAuthServerClaim(id int, claim models.AccessTokenClaim) (interface{}, error) {
	ret := _m.Called(id, claim)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthServerClaim")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.AccessTokenClaim) (interface{}, error)); ok {
		return rf(id, claim)
	}
	if rf, ok := ret.Get(0).(func(int, models.AccessTokenClaim) interface{}); ok {
		r0 = rf(id, claim)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.AccessTokenClaim) error); ok {
		r1 = rf(id, claim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateAuthServerClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthServerClaim'
type IOneLoginSDK_CreateAuthServerClaim_Call struct {
	*mock.Call
}

// CreateAuthServerClaim is a helper method to define mock.On call
//   - id int
//   - claim models.AccessTokenClaim
func (_e *IOneLoginSDK_Expecter) CreateAuthServerClaim(id interface{}, claim interface{}) *IOneLoginSDK_CreateAuthServerClaim_Call {
	return &IOneLoginSDK_CreateAuthServerClaim_Call{Call: _e.mock.On("CreateAuthServerClaim", id, claim)}
}

func (_c *IOneLoginSDK_CreateAuthServerClaim_Call) Run(run func(id int, claim models.AccessTokenClaim)) *IOneLoginSDK_CreateAuthServerClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.AccessTokenClaim))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateAuthServerClaim_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateAuthServerClaim_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateAuthServerClaim_Call) RunAndReturn(run func(int, models.AccessTokenClaim) (interface{}, error)) *IOneLoginSDK_CreateAuthServerClaim_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthServerScope provides a mock function with given fields: id, scope
func (_m *IOneLoginSDK) CreateAuthServerScope(id int, scope models.Scope) (interface{}, error) {
	ret := _m.Called(id, scope)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthServerScope")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Scope) (interface{}, error)); ok {
		return rf(id, scope)
	}
	if rf, ok := ret.Get(0).(func(int, models.Scope) interface{}); ok {
		r0 = rf(id, scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Scope) error); ok {
		r1 = rf(id, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateAuthServerScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthServerScope'
type IOneLoginSDK_CreateAuthServerScope_Call struct {
	*mock.Call
}

// CreateAuthServerScope is a helper method to define mock.On call
//   - id int
//   - scope models.Scope
func (_e *IOneLoginSDK_Expecter) CreateAuthServerScope(id interface{}, scope interface{}) *IOneLoginSDK_CreateAuthServerScope_Call {
	return &IOneLoginSDK_CreateAuthServerScope_Call{Call: _e.mock.On("CreateAuthServerScope", id, scope)}
}

func (_c *IOneLoginSDK_CreateAuthServerScope_Call) Run(run func(id int, scope models.Scope)) *IOneLoginSDK_CreateAuthServerScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Scope))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateAuthServerScope_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateAuthServerScope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateAuthServerScope_Call) RunAndReturn(run func(int, models.Scope) (interface{}, error)) *IOneLoginSDK_CreateAuthServerScope_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClientApp provides a mock function with given fields: id, clientApp
func (_m *IOneLoginSDK) CreateClientApp(id int, clientApp models.ClientApp) (interface{}, error) {
	ret := _m.Called(id, clientApp)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientApp")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.ClientApp) (interface{}, error)); ok {
		return rf(id, clientApp)
	}
	if rf, ok := ret.Get(0).(func(int, models.ClientApp) interface{}); ok {
		r0 = rf(id, clientApp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.ClientApp) error); ok {
		r1 = rf(id, clientApp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateClientApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClientApp'
type IOneLoginSDK_CreateClientApp_Call struct {
	*mock.Call
}

// CreateClientApp is a helper method to define mock.On call
//   - id int
//   - clientApp models.ClientApp
func (_e *IOneLoginSDK_Expecter) CreateClientApp(id interface{}, clientApp interface{}) *IOneLoginSDK_CreateClientApp_Call {
	return &IOneLoginSDK_CreateClientApp_Call{Call: _e.mock.On("CreateClientApp", id, clientApp)}
}

func (_c *IOneLoginSDK_CreateClientApp_Call) Run(run func(id int, clientApp models.ClientApp)) *IOneLoginSDK_CreateClientApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.ClientApp))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateClientApp_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateClientApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateClientApp_Call) RunAndReturn(run func(int, models.ClientApp) (interface{}, error)) *IOneLoginSDK_CreateClientApp_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEnvironmentVariable provides a mock function with given fields: name, value
func (_m *IOneLoginSDK) CreateEnvironmentVariable(name string, value string) (interface{}, error) {
	ret := _m.Called(name, value)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentVariable")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (interface{}, error)); ok {
		return rf(name, value)
	}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(name, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateEnvironmentVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEnvironmentVariable'
type IOneLoginSDK_CreateEnvironmentVariable_Call struct {
	*mock.Call
}

// CreateEnvironmentVariable is a helper method to define mock.On call
//   - name string
//   - value string
func (_e *IOneLoginSDK_Expecter) CreateEnvironmentVariable(name interface{}, value interface{}) *IOneLoginSDK_CreateEnvironmentVariable_Call {
	return &IOneLoginSDK_CreateEnvironmentVariable_Call{Call: _e.mock.On("CreateEnvironmentVariable", name, value)}
}

func (_c *IOneLoginSDK_CreateEnvironmentVariable_Call) Run(run func(name string, value string)) *IOneLoginSDK_CreateEnvironmentVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateEnvironmentVariable_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateEnvironmentVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateEnvironmentVariable_Call) RunAndReturn(run func(string, string) (interface{}, error)) *IOneLoginSDK_CreateEnvironmentVariable_Call {
	_c.Call.Return(run)
	return _c
}

// CreateHook provides a mock function with given fields: hook
func (_m *IOneLoginSDK) CreateHook(hook models.SmartHook) (interface{}, error) {
	ret := _m.Called(hook)

	if len(ret) == 0 {
		panic("no return value specified for CreateHook")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.SmartHook) (interface{}, error)); ok {
		return rf(hook)
	}
	if rf, ok := ret.Get(0).(func(models.SmartHook) interface{}); ok {
		r0 = rf(hook)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.SmartHook) error); ok {
		r1 = rf(hook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHook'
type IOneLoginSDK_CreateHook_Call struct {
	*mock.Call
}

// CreateHook is a helper method to define mock.On call
//   - hook models.SmartHook
func (_e *IOneLoginSDK_Expecter) CreateHook(hook interface{}) *IOneLoginSDK_CreateHook_Call {
	return &IOneLoginSDK_CreateHook_Call{Call: _e.mock.On("CreateHook", hook)}
}

func (_c *IOneLoginSDK_CreateHook_Call) Run(run func(hook models.SmartHook)) *IOneLoginSDK_CreateHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.SmartHook))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateHook_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateHook_Call) RunAndReturn(run func(models.SmartHook) (interface{}, error)) *IOneLoginSDK_CreateHook_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMapping provides a mock function with given fields: mapping
func (_m *IOneLoginSDK) CreateMapping(mapping models.UserMapping) (interface{}, error) {
	ret := _m.Called(mapping)

	if len(ret) == 0 {
		panic("no return value specified for CreateMapping")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserMapping) (interface{}, error)); ok {
		return rf(mapping)
	}
	if rf, ok := ret.Get(0).(func(models.UserMapping) interface{}); ok {
		r0 = rf(mapping)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.UserMapping) error); ok {
		r1 = rf(mapping)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMapping'
type IOneLoginSDK_CreateMapping_Call struct {
	*mock.Call
}

// CreateMapping is a helper method to define mock.On call
//   - mapping models.UserMapping
func (_e *IOneLoginSDK_Expecter) CreateMapping(mapping interface{}) *IOneLoginSDK_CreateMapping_Call {
	return &IOneLoginSDK_CreateMapping_Call{Call: _e.mock.On("CreateMapping", mapping)}
}

func (_c *IOneLoginSDK_CreateMapping_Call) Run(run func(mapping models.UserMapping)) *IOneLoginSDK_CreateMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.UserMapping))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateMapping_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateMapping_Call) RunAndReturn(run func(models.UserMapping) (interface{}, error)) *IOneLoginSDK_CreateMapping_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivilege provides a mock function with given fields: privilege
func (_m *IOneLoginSDK) CreatePrivilege(privilege models.Privilege) (interface{}, error) {
	ret := _m.Called(privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivilege")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Privilege) (interface{}, error)); ok {
		return rf(privilege)
	}
	if rf, ok := ret.Get(0).(func(models.Privilege) interface{}); ok {
		r0 = rf(privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.Privilege) error); ok {
		r1 = rf(privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreatePrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivilege'
type IOneLoginSDK_CreatePrivilege_Call struct {
	*mock.Call
}

// CreatePrivilege is a helper method to define mock.On call
//   - privilege models.Privilege
func (_e *IOneLoginSDK_Expecter) CreatePrivilege(privilege interface{}) *IOneLoginSDK_CreatePrivilege_Call {
	return &IOneLoginSDK_CreatePrivilege_Call{Call: _e.mock.On("CreatePrivilege", privilege)}
}

func (_c *IOneLoginSDK_CreatePrivilege_Call) Run(run func(privilege models.Privilege)) *IOneLoginSDK_CreatePrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Privilege))
	})
	return _c
}

func (_c *IOneLoginSDK_CreatePrivilege_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreatePrivilege_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreatePrivilege_Call) RunAndReturn(run func(models.Privilege) (interface{}, error)) *IOneLoginSDK_CreatePrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: role
func (_m *IOneLoginSDK) CreateRole(role *models.Role) (interface{}, error) {
	ret := _m.Called(role)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Role) (interface{}, error)); ok {
		return rf(role)
	}
	if rf, ok := ret.Get(0).(func(*models.Role) interface{}); ok {
		r0 = rf(role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Role) error); ok {
		r1 = rf(role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type IOneLoginSDK_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - role *models.Role
func (_e *IOneLoginSDK_Expecter) CreateRole(role interface{}) *IOneLoginSDK_CreateRole_Call {
	return &IOneLoginSDK_CreateRole_Call{Call: _e.mock.On("CreateRole", role)}
}

func (_c *IOneLoginSDK_CreateRole_Call) Run(run func(role *models.Role)) *IOneLoginSDK_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Role))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateRole_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateRole_Call) RunAndReturn(run func(*models.Role) (interface{}, error)) *IOneLoginSDK_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: user
func (_m *IOneLoginSDK) CreateUser(user models.User) (interface{}, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (interface{}, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) interface{}); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type IOneLoginSDK_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user models.User
func (_e *IOneLoginSDK_Expecter) CreateUser(user interface{}) *IOneLoginSDK_CreateUser_Call {
	return &IOneLoginSDK_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *IOneLoginSDK_CreateUser_Call) Run(run func(user models.User)) *IOneLoginSDK_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *IOneLoginSDK_CreateUser_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_CreateUser_Call) RunAndReturn(run func(models.User) (interface{}, error)) *IOneLoginSDK_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApp provides a mock function with given fields: id
func (_m *IOneLoginSDK) DeleteApp(id int) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApp'
type IOneLoginSDK_DeleteApp_Call struct {
	*mock.Call
}

// DeleteApp is a helper method to define mock.On call
//   - id int
func (_e *IOneLoginSDK_Expecter) DeleteApp(id interface{}) *IOneLoginSDK_DeleteApp_Call {
	return &IOneLoginSDK_DeleteApp_Call{Call: _e.mock.On("DeleteApp", id)}
}

func (_c *IOneLoginSDK_DeleteApp_Call) Run(run func(id int)) *IOneLoginSDK_DeleteApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteApp_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteApp_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_DeleteApp_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppRule provides a mock function with given fields: id, ruleID, queryParams
func (_m *IOneLoginSDK) DeleteAppRule(id int, ruleID int, queryParams map[string]string) (interface{}, error) {
	ret := _m.Called(id, ruleID, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppRule")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, map[string]string) (interface{}, error)); ok {
		return rf(id, ruleID, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, int, map[string]string) interface{}); ok {
		r0 = rf(id, ruleID, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, map[string]string) error); ok {
		r1 = rf(id, ruleID, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteAppRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppRule'
type IOneLoginSDK_DeleteAppRule_Call struct {
	*mock.Call
}

// DeleteAppRule is a helper method to define mock.On call
//   - id int
//   - ruleID int
//   - queryParams map[string]string
func (_e *IOneLoginSDK_Expecter) DeleteAppRule(id interface{}, ruleID interface{}, queryParams interface{}) *IOneLoginSDK_DeleteAppRule_Call {
	return &IOneLoginSDK_DeleteAppRule_Call{Call: _e.mock.On("DeleteAppRule", id, ruleID, queryParams)}
}

func (_c *IOneLoginSDK_DeleteAppRule_Call) Run(run func(id int, ruleID int, queryParams map[string]string)) *IOneLoginSDK_DeleteAppRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(map[string]string))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteAppRule_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteAppRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteAppRule_Call) RunAndReturn(run func(int, int, map[string]string) (interface{}, error)) *IOneLoginSDK_DeleteAppRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthClaim provides a mock function with given fields: id, claimID
func (_m *IOneLoginSDK) DeleteAuthClaim(id int, claimID int) (interface{}, error) {
	ret := _m.Called(id, claimID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthClaim")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (interface{}, error)); ok {
		return rf(id, claimID)
	}
	if rf, ok := ret.Get(0).(func(int, int) interface{}); ok {
		r0 = rf(id, claimID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, claimID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteAuthClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthClaim'
type IOneLoginSDK_DeleteAuthClaim_Call struct {
	*mock.Call
}

// DeleteAuthClaim is a helper method to define mock.On call
//   - id int
//   - claimID int
func (_e *IOneLoginSDK_Expecter) DeleteAuthClaim(id interface{}, claimID interface{}) *IOneLoginSDK_DeleteAuthClaim_Call {
	return &IOneLoginSDK_DeleteAuthClaim_Call{Call: _e.mock.On("DeleteAuthClaim", id, claimID)}
}

func (_c *IOneLoginSDK_DeleteAuthClaim_Call) Run(run func(id int, claimID int)) *IOneLoginSDK_DeleteAuthClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteAuthClaim_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteAuthClaim_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteAuthClaim_Call) RunAndReturn(run func(int, int) (interface{}, error)) *IOneLoginSDK_DeleteAuthClaim_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthServer provides a mock function with given fields: id
func (_m *IOneLoginSDK) DeleteAuthServer(id int) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthServer")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteAuthServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthServer'
type IOneLoginSDK_DeleteAuthServer_Call struct {
	*mock.Call
}

// DeleteAuthServer is a helper method to define mock.On call
//   - id int
func (_e *IOneLoginSDK_Expecter) DeleteAuthServer(id interface{}) *IOneLoginSDK_DeleteAuthServer_Call {
	return &IOneLoginSDK_DeleteAuthServer_Call{Call: _e.mock.On("DeleteAuthServer", id)}
}

func (_c *IOneLoginSDK_DeleteAuthServer_Call) Run(run func(id int)) *IOneLoginSDK_DeleteAuthServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteAuthServer_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteAuthServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteAuthServer_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_DeleteAuthServer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthServerScope provides a mock function with given fields: id, scopeID
func (_m *IOneLoginSDK) DeleteAuthServerScope(id int, scopeID int) (interface{}, error) {
	ret := _m.Called(id, scopeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthServerScope")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (interface{}, error)); ok {
		return rf(id, scopeID)
	}
	if rf, ok := ret.Get(0).(func(int, int) interface{}); ok {
		r0 = rf(id, scopeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, scopeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteAuthServerScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthServerScope'
type IOneLoginSDK_DeleteAuthServerScope_Call struct {
	*mock.Call
}

// DeleteAuthServerScope is a helper method to define mock.On call
//   - id int
//   - scopeID int
func (_e *IOneLoginSDK_Expecter) DeleteAuthServerScope(id interface{}, scopeID interface{}) *IOneLoginSDK_DeleteAuthServerScope_Call {
	return &IOneLoginSDK_DeleteAuthServerScope_Call{Call: _e.mock.On("DeleteAuthServerScope", id, scopeID)}
}

func (_c *IOneLoginSDK_DeleteAuthServerScope_Call) Run(run func(id int, scopeID int)) *IOneLoginSDK_DeleteAuthServerScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteAuthServerScope_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteAuthServerScope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteAuthServerScope_Call) RunAndReturn(run func(int, int) (interface{}, error)) *IOneLoginSDK_DeleteAuthServerScope_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientApp provides a mock function with given fields: id, clientID
func (_m *IOneLoginSDK) DeleteClientApp(id int, clientID int) (interface{}, error) {
	ret := _m.Called(id, clientID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientApp")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (interface{}, error)); ok {
		return rf(id, clientID)
	}
	if rf, ok := ret.Get(0).(func(int, int) interface{}); ok {
		r0 = rf(id, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteClientApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientApp'
type IOneLoginSDK_DeleteClientApp_Call struct {
	*mock.Call
}

// DeleteClientApp is a helper method to define mock.On call
//   - id int
//   - clientID int
func (_e *IOneLoginSDK_Expecter) DeleteClientApp(id interface{}, clientID interface{}) *IOneLoginSDK_DeleteClientApp_Call {
	return &IOneLoginSDK_DeleteClientApp_Call{Call: _e.mock.On("DeleteClientApp", id, clientID)}
}

func (_c *IOneLoginSDK_DeleteClientApp_Call) Run(run func(id int, clientID int)) *IOneLoginSDK_DeleteClientApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteClientApp_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteClientApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteClientApp_Call) RunAndReturn(run func(int, int) (interface{}, error)) *IOneLoginSDK_DeleteClientApp_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEnvironmentVariable provides a mock function with given fields: envVarID
func (_m *IOneLoginSDK) DeleteEnvironmentVariable(envVarID int) (interface{}, error) {
	ret := _m.Called(envVarID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentVariable")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(envVarID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(envVarID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(envVarID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteEnvironmentVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEnvironmentVariable'
type IOneLoginSDK_DeleteEnvironmentVariable_Call struct {
	*mock.Call
}

// DeleteEnvironmentVariable is a helper method to define mock.On call
//   - envVarID int
func (_e *IOneLoginSDK_Expecter) DeleteEnvironmentVariable(envVarID interface{}) *IOneLoginSDK_DeleteEnvironmentVariable_Call {
	return &IOneLoginSDK_DeleteEnvironmentVariable_Call{Call: _e.mock.On("DeleteEnvironmentVariable", envVarID)}
}

func (_c *IOneLoginSDK_DeleteEnvironmentVariable_Call) Run(run func(envVarID int)) *IOneLoginSDK_DeleteEnvironmentVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteEnvironmentVariable_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteEnvironmentVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteEnvironmentVariable_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_DeleteEnvironmentVariable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteHook provides a mock function with given fields: hookID
func (_m *IOneLoginSDK) DeleteHook(hookID int) (interface{}, error) {
	ret := _m.Called(hookID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHook")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(hookID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(hookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(hookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteHook'
type IOneLoginSDK_DeleteHook_Call struct {
	*mock.Call
}

// DeleteHook is a helper method to define mock.On call
//   - hookID int
func (_e *IOneLoginSDK_Expecter) DeleteHook(hookID interface{}) *IOneLoginSDK_DeleteHook_Call {
	return &IOneLoginSDK_DeleteHook_Call{Call: _e.mock.On("DeleteHook", hookID)}
}

func (_c *IOneLoginSDK_DeleteHook_Call) Run(run func(hookID int)) *IOneLoginSDK_DeleteHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteHook_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteHook_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_DeleteHook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping provides a mock function with given fields: mappingID
func (_m *IOneLoginSDK) DeleteMapping(mappingID int) (interface{}, error) {
	ret := _m.Called(mappingID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(mappingID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(mappingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(mappingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping'
type IOneLoginSDK_DeleteMapping_Call struct {
	*mock.Call
}

// DeleteMapping is a helper method to define mock.On call
//   - mappingID int
func (_e *IOneLoginSDK_Expecter) DeleteMapping(mappingID interface{}) *IOneLoginSDK_DeleteMapping_Call {
	return &IOneLoginSDK_DeleteMapping_Call{Call: _e.mock.On("DeleteMapping", mappingID)}
}

func (_c *IOneLoginSDK_DeleteMapping_Call) Run(run func(mappingID int)) *IOneLoginSDK_DeleteMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteMapping_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteMapping_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_DeleteMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivilege provides a mock function with given fields: privilegeID
func (_m *IOneLoginSDK) DeletePrivilege(privilegeID string) (interface{}, error) {
	ret := _m.Called(privilegeID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivilege")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(privilegeID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(privilegeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(privilegeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeletePrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivilege'
type IOneLoginSDK_DeletePrivilege_Call struct {
	*mock.Call
}

// DeletePrivilege is a helper method to define mock.On call
//   - privilegeID string
func (_e *IOneLoginSDK_Expecter) DeletePrivilege(privilegeID interface{}) *IOneLoginSDK_DeletePrivilege_Call {
	return &IOneLoginSDK_DeletePrivilege_Call{Call: _e.mock.On("DeletePrivilege", privilegeID)}
}

func (_c *IOneLoginSDK_DeletePrivilege_Call) Run(run func(privilegeID string)) *IOneLoginSDK_DeletePrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_DeletePrivilege_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeletePrivilege_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeletePrivilege_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_DeletePrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) DeleteRole(id int, queryParams map[string]string) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, map[string]string) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, map[string]string) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, map[string]string) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type IOneLoginSDK_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - id int
//   - queryParams map[string]string
func (_e *IOneLoginSDK_Expecter) DeleteRole(id interface{}, queryParams interface{}) *IOneLoginSDK_DeleteRole_Call {
	return &IOneLoginSDK_DeleteRole_Call{Call: _e.mock.On("DeleteRole", id, queryParams)}
}

func (_c *IOneLoginSDK_DeleteRole_Call) Run(run func(id int, queryParams map[string]string)) *IOneLoginSDK_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(map[string]string))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteRole_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteRole_Call) RunAndReturn(run func(int, map[string]string) (interface{}, error)) *IOneLoginSDK_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleAdmins provides a mock function with given fields: roleID, admins
func (_m *IOneLoginSDK) DeleteRoleAdmins(roleID int, admins []int) (interface{}, error) {
	ret := _m.Called(roleID, admins)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleAdmins")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []int) (interface{}, error)); ok {
		return rf(roleID, admins)
	}
	if rf, ok := ret.Get(0).(func(int, []int) interface{}); ok {
		r0 = rf(roleID, admins)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, []int) error); ok {
		r1 = rf(roleID, admins)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteRoleAdmins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleAdmins'
type IOneLoginSDK_DeleteRoleAdmins_Call struct {
	*mock.Call
}

// DeleteRoleAdmins is a helper method to define mock.On call
//   - roleID int
//   - admins []int
func (_e *IOneLoginSDK_Expecter) DeleteRoleAdmins(roleID interface{}, admins interface{}) *IOneLoginSDK_DeleteRoleAdmins_Call {
	return &IOneLoginSDK_DeleteRoleAdmins_Call{Call: _e.mock.On("DeleteRoleAdmins", roleID, admins)}
}

func (_c *IOneLoginSDK_DeleteRoleAdmins_Call) Run(run func(roleID int, admins []int)) *IOneLoginSDK_DeleteRoleAdmins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteRoleAdmins_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteRoleAdmins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteRoleAdmins_Call) RunAndReturn(run func(int, []int) (interface{}, error)) *IOneLoginSDK_DeleteRoleAdmins_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleFromPrivilege provides a mock function with given fields: privilegeID, roleID
func (_m *IOneLoginSDK) DeleteRoleFromPrivilege(privilegeID string, roleID int) (interface{}, error) {
	ret := _m.Called(privilegeID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleFromPrivilege")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (interface{}, error)); ok {
		return rf(privilegeID, roleID)
	}
	if rf, ok := ret.Get(0).(func(string, int) interface{}); ok {
		r0 = rf(privilegeID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(privilegeID, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteRoleFromPrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleFromPrivilege'
type IOneLoginSDK_DeleteRoleFromPrivilege_Call struct {
	*mock.Call
}

// DeleteRoleFromPrivilege is a helper method to define mock.On call
//   - privilegeID string
//   - roleID int
func (_e *IOneLoginSDK_Expecter) DeleteRoleFromPrivilege(privilegeID interface{}, roleID interface{}) *IOneLoginSDK_DeleteRoleFromPrivilege_Call {
	return &IOneLoginSDK_DeleteRoleFromPrivilege_Call{Call: _e.mock.On("DeleteRoleFromPrivilege", privilegeID, roleID)}
}

func (_c *IOneLoginSDK_DeleteRoleFromPrivilege_Call) Run(run func(privilegeID string, roleID int)) *IOneLoginSDK_DeleteRoleFromPrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteRoleFromPrivilege_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteRoleFromPrivilege_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteRoleFromPrivilege_Call) RunAndReturn(run func(string, int) (interface{}, error)) *IOneLoginSDK_DeleteRoleFromPrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleUsers provides a mock function with given fields: roleID, users
func (_m *IOneLoginSDK) DeleteRoleUsers(roleID int, users []int) (interface{}, error) {
	ret := _m.Called(roleID, users)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleUsers")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []int) (interface{}, error)); ok {
		return rf(roleID, users)
	}
	if rf, ok := ret.Get(0).(func(int, []int) interface{}); ok {
		r0 = rf(roleID, users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, []int) error); ok {
		r1 = rf(roleID, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteRoleUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleUsers'
type IOneLoginSDK_DeleteRoleUsers_Call struct {
	*mock.Call
}

// DeleteRoleUsers is a helper method to define mock.On call
//   - roleID int
//   - users []int
func (_e *IOneLoginSDK_Expecter) DeleteRoleUsers(roleID interface{}, users interface{}) *IOneLoginSDK_DeleteRoleUsers_Call {
	return &IOneLoginSDK_DeleteRoleUsers_Call{Call: _e.mock.On("DeleteRoleUsers", roleID, users)}
}

func (_c *IOneLoginSDK_DeleteRoleUsers_Call) Run(run func(roleID int, users []int)) *IOneLoginSDK_DeleteRoleUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteRoleUsers_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteRoleUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteRoleUsers_Call) RunAndReturn(run func(int, []int) (interface{}, error)) *IOneLoginSDK_DeleteRoleUsers_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: id
func (_m *IOneLoginSDK) DeleteUser(id int) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type IOneLoginSDK_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id int
func (_e *IOneLoginSDK_Expecter) DeleteUser(id interface{}) *IOneLoginSDK_DeleteUser_Call {
	return &IOneLoginSDK_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *IOneLoginSDK_DeleteUser_Call) Run(run func(id int)) *IOneLoginSDK_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DeleteUser_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DeleteUser_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DryrunMapping provides a mock function with given fields: mappingID
func (_m *IOneLoginSDK) DryrunMapping(mappingID int) (interface{}, error) {
	ret := _m.Called(mappingID)

	if len(ret) == 0 {
		panic("no return value specified for DryrunMapping")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(mappingID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(mappingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(mappingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_DryrunMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DryrunMapping'
type IOneLoginSDK_DryrunMapping_Call struct {
	*mock.Call
}

// DryrunMapping is a helper method to define mock.On call
//   - mappingID int
func (_e *IOneLoginSDK_Expecter) DryrunMapping(mappingID interface{}) *IOneLoginSDK_DryrunMapping_Call {
	return &IOneLoginSDK_DryrunMapping_Call{Call: _e.mock.On("DryrunMapping", mappingID)}
}

func (_c *IOneLoginSDK_DryrunMapping_Call) Run(run func(mappingID int)) *IOneLoginSDK_DryrunMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_DryrunMapping_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_DryrunMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_DryrunMapping_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_DryrunMapping_Call {
	_c.Call.Return(run)
	return _c
}

// EnrollMFAFactor provides a mock function with given fields: factor, userID
func (_m *IOneLoginSDK) EnrollMFAFactor(factor models.EnrollFactorRequest, userID int) (interface{}, error) {
	ret := _m.Called(factor, userID)

	if len(ret) == 0 {
		panic("no return value specified for EnrollMFAFactor")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.EnrollFactorRequest, int) (interface{}, error)); ok {
		return rf(factor, userID)
	}
	if rf, ok := ret.Get(0).(func(models.EnrollFactorRequest, int) interface{}); ok {
		r0 = rf(factor, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.EnrollFactorRequest, int) error); ok {
		r1 = rf(factor, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_EnrollMFAFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnrollMFAFactor'
type IOneLoginSDK_EnrollMFAFactor_Call struct {
	*mock.Call
}

// EnrollMFAFactor is a helper method to define mock.On call
//   - factor models.EnrollFactorRequest
//   - userID int
func (_e *IOneLoginSDK_Expecter) EnrollMFAFactor(factor interface{}, userID interface{}) *IOneLoginSDK_EnrollMFAFactor_Call {
	return &IOneLoginSDK_EnrollMFAFactor_Call{Call: _e.mock.On("EnrollMFAFactor", factor, userID)}
}

func (_c *IOneLoginSDK_EnrollMFAFactor_Call) Run(run func(factor models.EnrollFactorRequest, userID int)) *IOneLoginSDK_EnrollMFAFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.EnrollFactorRequest), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_EnrollMFAFactor_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_EnrollMFAFactor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_EnrollMFAFactor_Call) RunAndReturn(run func(models.EnrollFactorRequest, int) (interface{}, error)) *IOneLoginSDK_EnrollMFAFactor_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateInviteLink provides a mock function with given fields: email
func (_m *IOneLoginSDK) GenerateInviteLink(email string) (interface{}, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInviteLink")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GenerateInviteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateInviteLink'
type IOneLoginSDK_GenerateInviteLink_Call struct {
	*mock.Call
}

// GenerateInviteLink is a helper method to define mock.On call
//   - email string
func (_e *IOneLoginSDK_Expecter) GenerateInviteLink(email interface{}) *IOneLoginSDK_GenerateInviteLink_Call {
	return &IOneLoginSDK_GenerateInviteLink_Call{Call: _e.mock.On("GenerateInviteLink", email)}
}

func (_c *IOneLoginSDK_GenerateInviteLink_Call) Run(run func(email string)) *IOneLoginSDK_GenerateInviteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_GenerateInviteLink_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GenerateInviteLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GenerateInviteLink_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_GenerateInviteLink_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateMFAToken provides a mock function with given fields: userID, request
func (_m *IOneLoginSDK) GenerateMFAToken(userID int, request models.GenerateMFATokenRequest) (interface{}, error) {
	ret := _m.Called(userID, request)

	if len(ret) == 0 {
		panic("no return value specified for GenerateMFAToken")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.GenerateMFATokenRequest) (interface{}, error)); ok {
		return rf(userID, request)
	}
	if rf, ok := ret.Get(0).(func(int, models.GenerateMFATokenRequest) interface{}); ok {
		r0 = rf(userID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.GenerateMFATokenRequest) error); ok {
		r1 = rf(userID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GenerateMFAToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateMFAToken'
type IOneLoginSDK_GenerateMFAToken_Call struct {
	*mock.Call
}

// GenerateMFAToken is a helper method to define mock.On call
//   - userID int
//   - request models.GenerateMFATokenRequest
func (_e *IOneLoginSDK_Expecter) GenerateMFAToken(userID interface{}, request interface{}) *IOneLoginSDK_GenerateMFAToken_Call {
	return &IOneLoginSDK_GenerateMFAToken_Call{Call: _e.mock.On("GenerateMFAToken", userID, request)}
}

func (_c *IOneLoginSDK_GenerateMFAToken_Call) Run(run func(userID int, request models.GenerateMFATokenRequest)) *IOneLoginSDK_GenerateMFAToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.GenerateMFATokenRequest))
	})
	return _c
}

func (_c *IOneLoginSDK_GenerateMFAToken_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GenerateMFAToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GenerateMFAToken_Call) RunAndReturn(run func(int, models.GenerateMFATokenRequest) (interface{}, error)) *IOneLoginSDK_GenerateMFAToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateSAMLAssertion provides a mock function with given fields: request
func (_m *IOneLoginSDK) GenerateSAMLAssertion(request models.GenerateSAMLTokenRequest) (interface{}, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSAMLAssertion")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.GenerateSAMLTokenRequest) (interface{}, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(models.GenerateSAMLTokenRequest) interface{}); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.GenerateSAMLTokenRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GenerateSAMLAssertion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSAMLAssertion'
type IOneLoginSDK_GenerateSAMLAssertion_Call struct {
	*mock.Call
}

// GenerateSAMLAssertion is a helper method to define mock.On call
//   - request models.GenerateSAMLTokenRequest
func (_e *IOneLoginSDK_Expecter) GenerateSAMLAssertion(request interface{}) *IOneLoginSDK_GenerateSAMLAssertion_Call {
	return &IOneLoginSDK_GenerateSAMLAssertion_Call{Call: _e.mock.On("GenerateSAMLAssertion", request)}
}

func (_c *IOneLoginSDK_GenerateSAMLAssertion_Call) Run(run func(request models.GenerateSAMLTokenRequest)) *IOneLoginSDK_GenerateSAMLAssertion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.GenerateSAMLTokenRequest))
	})
	return _c
}

func (_c *IOneLoginSDK_GenerateSAMLAssertion_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GenerateSAMLAssertion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GenerateSAMLAssertion_Call) RunAndReturn(run func(models.GenerateSAMLTokenRequest) (interface{}, error)) *IOneLoginSDK_GenerateSAMLAssertion_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountId provides a mock function with given fields:
func (_m *IOneLoginSDK) GetAccountId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccountId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IOneLoginSDK_GetAccountId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountId'
type IOneLoginSDK_GetAccountId_Call struct {
	*mock.Call
}

// GetAccountId is a helper method to define mock.On call
func (_e *IOneLoginSDK_Expecter) GetAccountId() *IOneLoginSDK_GetAccountId_Call {
	return &IOneLoginSDK_GetAccountId_Call{Call: _e.mock.On("GetAccountId")}
}

func (_c *IOneLoginSDK_GetAccountId_Call) Run(run func()) *IOneLoginSDK_GetAccountId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOneLoginSDK_GetAccountId_Call) Return(_a0 string) *IOneLoginSDK_GetAccountId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOneLoginSDK_GetAccountId_Call) RunAndReturn(run func() string) *IOneLoginSDK_GetAccountId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppByID provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) GetAppByID(id int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAppByID")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAppByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppByID'
type IOneLoginSDK_GetAppByID_Call struct {
	*mock.Call
}

// GetAppByID is a helper method to define mock.On call
//   - id int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetAppByID(id interface{}, queryParams interface{}) *IOneLoginSDK_GetAppByID_Call {
	return &IOneLoginSDK_GetAppByID_Call{Call: _e.mock.On("GetAppByID", id, queryParams)}
}

func (_c *IOneLoginSDK_GetAppByID_Call) Run(run func(id int, queryParams models.Queryable)) *IOneLoginSDK_GetAppByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAppByID_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAppByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAppByID_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetAppByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppRuleByID provides a mock function with given fields: id, ruleID, queryParams
func (_m *IOneLoginSDK) GetAppRuleByID(id int, ruleID int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, ruleID, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAppRuleByID")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, models.Queryable) (interface{}, error)); ok {
		return rf(id, ruleID, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, int, models.Queryable) interface{}); ok {
		r0 = rf(id, ruleID, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, models.Queryable) error); ok {
		r1 = rf(id, ruleID, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAppRuleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppRuleByID'
type IOneLoginSDK_GetAppRuleByID_Call struct {
	*mock.Call
}

// GetAppRuleByID is a helper method to define mock.On call
//   - id int
//   - ruleID int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetAppRuleByID(id interface{}, ruleID interface{}, queryParams interface{}) *IOneLoginSDK_GetAppRuleByID_Call {
	return &IOneLoginSDK_GetAppRuleByID_Call{Call: _e.mock.On("GetAppRuleByID", id, ruleID, queryParams)}
}

func (_c *IOneLoginSDK_GetAppRuleByID_Call) Run(run func(id int, ruleID int, queryParams models.Queryable)) *IOneLoginSDK_GetAppRuleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAppRuleByID_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAppRuleByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAppRuleByID_Call) RunAndReturn(run func(int, int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetAppRuleByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppRules provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) GetAppRules(id int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAppRules")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAppRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppRules'
type IOneLoginSDK_GetAppRules_Call struct {
	*mock.Call
}

// GetAppRules is a helper method to define mock.On call
//   - id int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetAppRules(id interface{}, queryParams interface{}) *IOneLoginSDK_GetAppRules_Call {
	return &IOneLoginSDK_GetAppRules_Call{Call: _e.mock.On("GetAppRules", id, queryParams)}
}

func (_c *IOneLoginSDK_GetAppRules_Call) Run(run func(id int, queryParams models.Queryable)) *IOneLoginSDK_GetAppRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAppRules_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAppRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAppRules_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetAppRules_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppUsers provides a mock function with given fields: appID
func (_m *IOneLoginSDK) GetAppUsers(appID int) (interface{}, error) {
	ret := _m.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppUsers")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(appID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAppUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppUsers'
type IOneLoginSDK_GetAppUsers_Call struct {
	*mock.Call
}

// GetAppUsers is a helper method to define mock.On call
//   - appID int
func (_e *IOneLoginSDK_Expecter) GetAppUsers(appID interface{}) *IOneLoginSDK_GetAppUsers_Call {
	return &IOneLoginSDK_GetAppUsers_Call{Call: _e.mock.On("GetAppUsers", appID)}
}

func (_c *IOneLoginSDK_GetAppUsers_Call) Run(run func(appID int)) *IOneLoginSDK_GetAppUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAppUsers_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAppUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAppUsers_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetAppUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetApps provides a mock function with given fields: queryParams
func (_m *IOneLoginSDK) GetApps(queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetApps")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Queryable) (interface{}, error)); ok {
		return rf(queryParams)
	}
	if rf, ok := ret.Get(0).(func(models.Queryable) interface{}); ok {
		r0 = rf(queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.Queryable) error); ok {
		r1 = rf(queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApps'
type IOneLoginSDK_GetApps_Call struct {
	*mock.Call
}

// GetApps is a helper method to define mock.On call
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetApps(queryParams interface{}) *IOneLoginSDK_GetApps_Call {
	return &IOneLoginSDK_GetApps_Call{Call: _e.mock.On("GetApps", queryParams)}
}

func (_c *IOneLoginSDK_GetApps_Call) Run(run func(queryParams models.Queryable)) *IOneLoginSDK_GetApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetApps_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetApps_Call) RunAndReturn(run func(models.Queryable) (interface{}, error)) *IOneLoginSDK_GetApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthClaims provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) GetAuthClaims(id int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthClaims")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAuthClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthClaims'
type IOneLoginSDK_GetAuthClaims_Call struct {
	*mock.Call
}

// GetAuthClaims is a helper method to define mock.On call
//   - id int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetAuthClaims(id interface{}, queryParams interface{}) *IOneLoginSDK_GetAuthClaims_Call {
	return &IOneLoginSDK_GetAuthClaims_Call{Call: _e.mock.On("GetAuthClaims", id, queryParams)}
}

func (_c *IOneLoginSDK_GetAuthClaims_Call) Run(run func(id int, queryParams models.Queryable)) *IOneLoginSDK_GetAuthClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAuthClaims_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAuthClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAuthClaims_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetAuthClaims_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthServerByID provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) GetAuthServerByID(id int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthServerByID")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAuthServerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthServerByID'
type IOneLoginSDK_GetAuthServerByID_Call struct {
	*mock.Call
}

// GetAuthServerByID is a helper method to define mock.On call
//   - id int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetAuthServerByID(id interface{}, queryParams interface{}) *IOneLoginSDK_GetAuthServerByID_Call {
	return &IOneLoginSDK_GetAuthServerByID_Call{Call: _e.mock.On("GetAuthServerByID", id, queryParams)}
}

func (_c *IOneLoginSDK_GetAuthServerByID_Call) Run(run func(id int, queryParams models.Queryable)) *IOneLoginSDK_GetAuthServerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAuthServerByID_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAuthServerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAuthServerByID_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetAuthServerByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthServerScopes provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) GetAuthServerScopes(id int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthServerScopes")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAuthServerScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthServerScopes'
type IOneLoginSDK_GetAuthServerScopes_Call struct {
	*mock.Call
}

// GetAuthServerScopes is a helper method to define mock.On call
//   - id int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetAuthServerScopes(id interface{}, queryParams interface{}) *IOneLoginSDK_GetAuthServerScopes_Call {
	return &IOneLoginSDK_GetAuthServerScopes_Call{Call: _e.mock.On("GetAuthServerScopes", id, queryParams)}
}

func (_c *IOneLoginSDK_GetAuthServerScopes_Call) Run(run func(id int, queryParams models.Queryable)) *IOneLoginSDK_GetAuthServerScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAuthServerScopes_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAuthServerScopes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAuthServerScopes_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetAuthServerScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthServers provides a mock function with given fields: queryParams
func (_m *IOneLoginSDK) GetAuthServers(queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthServers")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Queryable) (interface{}, error)); ok {
		return rf(queryParams)
	}
	if rf, ok := ret.Get(0).(func(models.Queryable) interface{}); ok {
		r0 = rf(queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.Queryable) error); ok {
		r1 = rf(queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAuthServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthServers'
type IOneLoginSDK_GetAuthServers_Call struct {
	*mock.Call
}

// GetAuthServers is a helper method to define mock.On call
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetAuthServers(queryParams interface{}) *IOneLoginSDK_GetAuthServers_Call {
	return &IOneLoginSDK_GetAuthServers_Call{Call: _e.mock.On("GetAuthServers", queryParams)}
}

func (_c *IOneLoginSDK_GetAuthServers_Call) Run(run func(queryParams models.Queryable)) *IOneLoginSDK_GetAuthServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAuthServers_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAuthServers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAuthServers_Call) RunAndReturn(run func(models.Queryable) (interface{}, error)) *IOneLoginSDK_GetAuthServers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableMFAFactors provides a mock function with given fields: userID
func (_m *IOneLoginSDK) GetAvailableMFAFactors(userID int) (interface{}, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableMFAFactors")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetAvailableMFAFactors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableMFAFactors'
type IOneLoginSDK_GetAvailableMFAFactors_Call struct {
	*mock.Call
}

// GetAvailableMFAFactors is a helper method to define mock.On call
//   - userID int
func (_e *IOneLoginSDK_Expecter) GetAvailableMFAFactors(userID interface{}) *IOneLoginSDK_GetAvailableMFAFactors_Call {
	return &IOneLoginSDK_GetAvailableMFAFactors_Call{Call: _e.mock.On("GetAvailableMFAFactors", userID)}
}

func (_c *IOneLoginSDK_GetAvailableMFAFactors_Call) Run(run func(userID int)) *IOneLoginSDK_GetAvailableMFAFactors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetAvailableMFAFactors_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetAvailableMFAFactors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetAvailableMFAFactors_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetAvailableMFAFactors_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientApps provides a mock function with given fields: id
func (_m *IOneLoginSDK) GetClientApps(id int) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetClientApps")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetClientApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientApps'
type IOneLoginSDK_GetClientApps_Call struct {
	*mock.Call
}

// GetClientApps is a helper method to define mock.On call
//   - id int
func (_e *IOneLoginSDK_Expecter) GetClientApps(id interface{}) *IOneLoginSDK_GetClientApps_Call {
	return &IOneLoginSDK_GetClientApps_Call{Call: _e.mock.On("GetClientApps", id)}
}

func (_c *IOneLoginSDK_GetClientApps_Call) Run(run func(id int)) *IOneLoginSDK_GetClientApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetClientApps_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetClientApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetClientApps_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetClientApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomAttributes provides a mock function with given fields:
func (_m *IOneLoginSDK) GetCustomAttributes() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCustomAttributes")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetCustomAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomAttributes'
type IOneLoginSDK_GetCustomAttributes_Call struct {
	*mock.Call
}

// GetCustomAttributes is a helper method to define mock.On call
func (_e *IOneLoginSDK_Expecter) GetCustomAttributes() *IOneLoginSDK_GetCustomAttributes_Call {
	return &IOneLoginSDK_GetCustomAttributes_Call{Call: _e.mock.On("GetCustomAttributes")}
}

func (_c *IOneLoginSDK_GetCustomAttributes_Call) Run(run func()) *IOneLoginSDK_GetCustomAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOneLoginSDK_GetCustomAttributes_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetCustomAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetCustomAttributes_Call) RunAndReturn(run func() (interface{}, error)) *IOneLoginSDK_GetCustomAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnrolledMFAFactors provides a mock function with given fields: userID
func (_m *IOneLoginSDK) GetEnrolledMFAFactors(userID int) (interface{}, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetEnrolledMFAFactors")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetEnrolledMFAFactors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnrolledMFAFactors'
type IOneLoginSDK_GetEnrolledMFAFactors_Call struct {
	*mock.Call
}

// GetEnrolledMFAFactors is a helper method to define mock.On call
//   - userID int
func (_e *IOneLoginSDK_Expecter) GetEnrolledMFAFactors(userID interface{}) *IOneLoginSDK_GetEnrolledMFAFactors_Call {
	return &IOneLoginSDK_GetEnrolledMFAFactors_Call{Call: _e.mock.On("GetEnrolledMFAFactors", userID)}
}

func (_c *IOneLoginSDK_GetEnrolledMFAFactors_Call) Run(run func(userID int)) *IOneLoginSDK_GetEnrolledMFAFactors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetEnrolledMFAFactors_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetEnrolledMFAFactors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetEnrolledMFAFactors_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetEnrolledMFAFactors_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnvironmentVariable provides a mock function with given fields: envVarID
func (_m *IOneLoginSDK) GetEnvironmentVariable(envVarID int) (interface{}, error) {
	ret := _m.Called(envVarID)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentVariable")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(envVarID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(envVarID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(envVarID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetEnvironmentVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvironmentVariable'
type IOneLoginSDK_GetEnvironmentVariable_Call struct {
	*mock.Call
}

// GetEnvironmentVariable is a helper method to define mock.On call
//   - envVarID int
func (_e *IOneLoginSDK_Expecter) GetEnvironmentVariable(envVarID interface{}) *IOneLoginSDK_GetEnvironmentVariable_Call {
	return &IOneLoginSDK_GetEnvironmentVariable_Call{Call: _e.mock.On("GetEnvironmentVariable", envVarID)}
}

func (_c *IOneLoginSDK_GetEnvironmentVariable_Call) Run(run func(envVarID int)) *IOneLoginSDK_GetEnvironmentVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetEnvironmentVariable_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetEnvironmentVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetEnvironmentVariable_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetEnvironmentVariable_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByID provides a mock function with given fields: groupID
func (_m *IOneLoginSDK) GetGroupByID(groupID int) (interface{}, error) {
	ret := _m.Called(groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByID")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(groupID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetGroupByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByID'
type IOneLoginSDK_GetGroupByID_Call struct {
	*mock.Call
}

// GetGroupByID is a helper method to define mock.On call
//   - groupID int
func (_e *IOneLoginSDK_Expecter) GetGroupByID(groupID interface{}) *IOneLoginSDK_GetGroupByID_Call {
	return &IOneLoginSDK_GetGroupByID_Call{Call: _e.mock.On("GetGroupByID", groupID)}
}

func (_c *IOneLoginSDK_GetGroupByID_Call) Run(run func(groupID int)) *IOneLoginSDK_GetGroupByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetGroupByID_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetGroupByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetGroupByID_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetGroupByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: queryParams
func (_m *IOneLoginSDK) GetGroups(queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Queryable) (interface{}, error)); ok {
		return rf(queryParams)
	}
	if rf, ok := ret.Get(0).(func(models.Queryable) interface{}); ok {
		r0 = rf(queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.Queryable) error); ok {
		r1 = rf(queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type IOneLoginSDK_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetGroups(queryParams interface{}) *IOneLoginSDK_GetGroups_Call {
	return &IOneLoginSDK_GetGroups_Call{Call: _e.mock.On("GetGroups", queryParams)}
}

func (_c *IOneLoginSDK_GetGroups_Call) Run(run func(queryParams models.Queryable)) *IOneLoginSDK_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetGroups_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetGroups_Call) RunAndReturn(run func(models.Queryable) (interface{}, error)) *IOneLoginSDK_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetHook provides a mock function with given fields: hookID, query
func (_m *IOneLoginSDK) GetHook(hookID int, query models.Queryable) (interface{}, error) {
	ret := _m.Called(hookID, query)

	if len(ret) == 0 {
		panic("no return value specified for GetHook")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(hookID, query)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(hookID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(hookID, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHook'
type IOneLoginSDK_GetHook_Call struct {
	*mock.Call
}

// GetHook is a helper method to define mock.On call
//   - hookID int
//   - query models.Queryable
func (_e *IOneLoginSDK_Expecter) GetHook(hookID interface{}, query interface{}) *IOneLoginSDK_GetHook_Call {
	return &IOneLoginSDK_GetHook_Call{Call: _e.mock.On("GetHook", hookID, query)}
}

func (_c *IOneLoginSDK_GetHook_Call) Run(run func(hookID int, query models.Queryable)) *IOneLoginSDK_GetHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetHook_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetHook_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetHook_Call {
	_c.Call.Return(run)
	return _c
}

// GetHookLogs provides a mock function with given fields: hookID, query
func (_m *IOneLoginSDK) GetHookLogs(hookID int, query models.Queryable) (interface{}, error) {
	ret := _m.Called(hookID, query)

	if len(ret) == 0 {
		panic("no return value specified for GetHookLogs")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(hookID, query)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(hookID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(hookID, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetHookLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHookLogs'
type IOneLoginSDK_GetHookLogs_Call struct {
	*mock.Call
}

// GetHookLogs is a helper method to define mock.On call
//   - hookID int
//   - query models.Queryable
func (_e *IOneLoginSDK_Expecter) GetHookLogs(hookID interface{}, query interface{}) *IOneLoginSDK_GetHookLogs_Call {
	return &IOneLoginSDK_GetHookLogs_Call{Call: _e.mock.On("GetHookLogs", hookID, query)}
}

func (_c *IOneLoginSDK_GetHookLogs_Call) Run(run func(hookID int, query models.Queryable)) *IOneLoginSDK_GetHookLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetHookLogs_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetHookLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetHookLogs_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetHookLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetMapping provides a mock function with given fields: mappingID
func (_m *IOneLoginSDK) GetMapping(mappingID int) (interface{}, error) {
	ret := _m.Called(mappingID)

	if len(ret) == 0 {
		panic("no return value specified for GetMapping")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(mappingID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(mappingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(mappingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMapping'
type IOneLoginSDK_GetMapping_Call struct {
	*mock.Call
}

// GetMapping is a helper method to define mock.On call
//   - mappingID int
func (_e *IOneLoginSDK_Expecter) GetMapping(mappingID interface{}) *IOneLoginSDK_GetMapping_Call {
	return &IOneLoginSDK_GetMapping_Call{Call: _e.mock.On("GetMapping", mappingID)}
}

func (_c *IOneLoginSDK_GetMapping_Call) Run(run func(mappingID int)) *IOneLoginSDK_GetMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetMapping_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetMapping_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetMapping_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivilege provides a mock function with given fields: privilegeID
func (_m *IOneLoginSDK) GetPrivilege(privilegeID string) (interface{}, error) {
	ret := _m.Called(privilegeID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivilege")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(privilegeID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(privilegeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(privilegeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetPrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivilege'
type IOneLoginSDK_GetPrivilege_Call struct {
	*mock.Call
}

// GetPrivilege is a helper method to define mock.On call
//   - privilegeID string
func (_e *IOneLoginSDK_Expecter) GetPrivilege(privilegeID interface{}) *IOneLoginSDK_GetPrivilege_Call {
	return &IOneLoginSDK_GetPrivilege_Call{Call: _e.mock.On("GetPrivilege", privilegeID)}
}

func (_c *IOneLoginSDK_GetPrivilege_Call) Run(run func(privilegeID string)) *IOneLoginSDK_GetPrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_GetPrivilege_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetPrivilege_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetPrivilege_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_GetPrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivilegeRoles provides a mock function with given fields: privilegeID
func (_m *IOneLoginSDK) GetPrivilegeRoles(privilegeID string) (interface{}, error) {
	ret := _m.Called(privilegeID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivilegeRoles")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(privilegeID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(privilegeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(privilegeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetPrivilegeRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivilegeRoles'
type IOneLoginSDK_GetPrivilegeRoles_Call struct {
	*mock.Call
}

// GetPrivilegeRoles is a helper method to define mock.On call
//   - privilegeID string
func (_e *IOneLoginSDK_Expecter) GetPrivilegeRoles(privilegeID interface{}) *IOneLoginSDK_GetPrivilegeRoles_Call {
	return &IOneLoginSDK_GetPrivilegeRoles_Call{Call: _e.mock.On("GetPrivilegeRoles", privilegeID)}
}

func (_c *IOneLoginSDK_GetPrivilegeRoles_Call) Run(run func(privilegeID string)) *IOneLoginSDK_GetPrivilegeRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_GetPrivilegeRoles_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetPrivilegeRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetPrivilegeRoles_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_GetPrivilegeRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivilegeUsers provides a mock function with given fields: privilegeID
func (_m *IOneLoginSDK) GetPrivilegeUsers(privilegeID string) (interface{}, error) {
	ret := _m.Called(privilegeID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivilegeUsers")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(privilegeID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(privilegeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(privilegeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetPrivilegeUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivilegeUsers'
type IOneLoginSDK_GetPrivilegeUsers_Call struct {
	*mock.Call
}

// GetPrivilegeUsers is a helper method to define mock.On call
//   - privilegeID string
func (_e *IOneLoginSDK_Expecter) GetPrivilegeUsers(privilegeID interface{}) *IOneLoginSDK_GetPrivilegeUsers_Call {
	return &IOneLoginSDK_GetPrivilegeUsers_Call{Call: _e.mock.On("GetPrivilegeUsers", privilegeID)}
}

func (_c *IOneLoginSDK_GetPrivilegeUsers_Call) Run(run func(privilegeID string)) *IOneLoginSDK_GetPrivilegeUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_GetPrivilegeUsers_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetPrivilegeUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetPrivilegeUsers_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_GetPrivilegeUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAdmins provides a mock function with given fields: roleID
func (_m *IOneLoginSDK) GetRoleAdmins(roleID int) (interface{}, error) {
	ret := _m.Called(roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAdmins")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(roleID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetRoleAdmins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAdmins'
type IOneLoginSDK_GetRoleAdmins_Call struct {
	*mock.Call
}

// GetRoleAdmins is a helper method to define mock.On call
//   - roleID int
func (_e *IOneLoginSDK_Expecter) GetRoleAdmins(roleID interface{}) *IOneLoginSDK_GetRoleAdmins_Call {
	return &IOneLoginSDK_GetRoleAdmins_Call{Call: _e.mock.On("GetRoleAdmins", roleID)}
}

func (_c *IOneLoginSDK_GetRoleAdmins_Call) Run(run func(roleID int)) *IOneLoginSDK_GetRoleAdmins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetRoleAdmins_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetRoleAdmins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetRoleAdmins_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetRoleAdmins_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleApps provides a mock function with given fields: roleID
func (_m *IOneLoginSDK) GetRoleApps(roleID int) (interface{}, error) {
	ret := _m.Called(roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleApps")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(roleID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetRoleApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleApps'
type IOneLoginSDK_GetRoleApps_Call struct {
	*mock.Call
}

// GetRoleApps is a helper method to define mock.On call
//   - roleID int
func (_e *IOneLoginSDK_Expecter) GetRoleApps(roleID interface{}) *IOneLoginSDK_GetRoleApps_Call {
	return &IOneLoginSDK_GetRoleApps_Call{Call: _e.mock.On("GetRoleApps", roleID)}
}

func (_c *IOneLoginSDK_GetRoleApps_Call) Run(run func(roleID int)) *IOneLoginSDK_GetRoleApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetRoleApps_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetRoleApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetRoleApps_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetRoleApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByID provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) GetRoleByID(id int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByID")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetRoleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByID'
type IOneLoginSDK_GetRoleByID_Call struct {
	*mock.Call
}

// GetRoleByID is a helper method to define mock.On call
//   - id int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetRoleByID(id interface{}, queryParams interface{}) *IOneLoginSDK_GetRoleByID_Call {
	return &IOneLoginSDK_GetRoleByID_Call{Call: _e.mock.On("GetRoleByID", id, queryParams)}
}

func (_c *IOneLoginSDK_GetRoleByID_Call) Run(run func(id int, queryParams models.Queryable)) *IOneLoginSDK_GetRoleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetRoleByID_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetRoleByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetRoleByID_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetRoleByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleUsers provides a mock function with given fields: roleID, queryParams
func (_m *IOneLoginSDK) GetRoleUsers(roleID int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(roleID, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleUsers")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(roleID, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(roleID, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(roleID, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetRoleUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleUsers'
type IOneLoginSDK_GetRoleUsers_Call struct {
	*mock.Call
}

// GetRoleUsers is a helper method to define mock.On call
//   - roleID int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetRoleUsers(roleID interface{}, queryParams interface{}) *IOneLoginSDK_GetRoleUsers_Call {
	return &IOneLoginSDK_GetRoleUsers_Call{Call: _e.mock.On("GetRoleUsers", roleID, queryParams)}
}

func (_c *IOneLoginSDK_GetRoleUsers_Call) Run(run func(roleID int, queryParams models.Queryable)) *IOneLoginSDK_GetRoleUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetRoleUsers_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetRoleUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetRoleUsers_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetRoleUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: queryParams
func (_m *IOneLoginSDK) GetRoles(queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Queryable) (interface{}, error)); ok {
		return rf(queryParams)
	}
	if rf, ok := ret.Get(0).(func(models.Queryable) interface{}); ok {
		r0 = rf(queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.Queryable) error); ok {
		r1 = rf(queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type IOneLoginSDK_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetRoles(queryParams interface{}) *IOneLoginSDK_GetRoles_Call {
	return &IOneLoginSDK_GetRoles_Call{Call: _e.mock.On("GetRoles", queryParams)}
}

func (_c *IOneLoginSDK_GetRoles_Call) Run(run func(queryParams models.Queryable)) *IOneLoginSDK_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetRoles_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetRoles_Call) RunAndReturn(run func(models.Queryable) (interface{}, error)) *IOneLoginSDK_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function with given fields:
func (_m *IOneLoginSDK) GetToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type IOneLoginSDK_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
func (_e *IOneLoginSDK_Expecter) GetToken() *IOneLoginSDK_GetToken_Call {
	return &IOneLoginSDK_GetToken_Call{Call: _e.mock.On("GetToken")}
}

func (_c *IOneLoginSDK_GetToken_Call) Run(run func()) *IOneLoginSDK_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOneLoginSDK_GetToken_Call) Return(_a0 string, _a1 error) *IOneLoginSDK_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetToken_Call) RunAndReturn(run func() (string, error)) *IOneLoginSDK_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserApps provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) GetUserApps(id int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetUserApps")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetUserApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserApps'
type IOneLoginSDK_GetUserApps_Call struct {
	*mock.Call
}

// GetUserApps is a helper method to define mock.On call
//   - id int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetUserApps(id interface{}, queryParams interface{}) *IOneLoginSDK_GetUserApps_Call {
	return &IOneLoginSDK_GetUserApps_Call{Call: _e.mock.On("GetUserApps", id, queryParams)}
}

func (_c *IOneLoginSDK_GetUserApps_Call) Run(run func(id int, queryParams models.Queryable)) *IOneLoginSDK_GetUserApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetUserApps_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetUserApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetUserApps_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetUserApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: id, queryParams
func (_m *IOneLoginSDK) GetUserByID(id int, queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(id, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Queryable) (interface{}, error)); ok {
		return rf(id, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Queryable) interface{}); ok {
		r0 = rf(id, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Queryable) error); ok {
		r1 = rf(id, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type IOneLoginSDK_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id int
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) GetUserByID(id interface{}, queryParams interface{}) *IOneLoginSDK_GetUserByID_Call {
	return &IOneLoginSDK_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id, queryParams)}
}

func (_c *IOneLoginSDK_GetUserByID_Call) Run(run func(id int, queryParams models.Queryable)) *IOneLoginSDK_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetUserByID_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetUserByID_Call) RunAndReturn(run func(int, models.Queryable) (interface{}, error)) *IOneLoginSDK_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: id
func (_m *IOneLoginSDK) GetUserRoles(id int) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type IOneLoginSDK_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - id int
func (_e *IOneLoginSDK_Expecter) GetUserRoles(id interface{}) *IOneLoginSDK_GetUserRoles_Call {
	return &IOneLoginSDK_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", id)}
}

func (_c *IOneLoginSDK_GetUserRoles_Call) Run(run func(id int)) *IOneLoginSDK_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_GetUserRoles_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetUserRoles_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: query
func (_m *IOneLoginSDK) GetUsers(query models.Queryable) (interface{}, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Queryable) (interface{}, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(models.Queryable) interface{}); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.Queryable) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type IOneLoginSDK_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - query models.Queryable
func (_e *IOneLoginSDK_Expecter) GetUsers(query interface{}) *IOneLoginSDK_GetUsers_Call {
	return &IOneLoginSDK_GetUsers_Call{Call: _e.mock.On("GetUsers", query)}
}

func (_c *IOneLoginSDK_GetUsers_Call) Run(run func(query models.Queryable)) *IOneLoginSDK_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_GetUsers_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_GetUsers_Call) RunAndReturn(run func(models.Queryable) (interface{}, error)) *IOneLoginSDK_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListActionValues provides a mock function with given fields: actionValue
func (_m *IOneLoginSDK) ListActionValues(actionValue string) (interface{}, error) {
	ret := _m.Called(actionValue)

	if len(ret) == 0 {
		panic("no return value specified for ListActionValues")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(actionValue)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(actionValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(actionValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListActionValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActionValues'
type IOneLoginSDK_ListActionValues_Call struct {
	*mock.Call
}

// ListActionValues is a helper method to define mock.On call
//   - actionValue string
func (_e *IOneLoginSDK_Expecter) ListActionValues(actionValue interface{}) *IOneLoginSDK_ListActionValues_Call {
	return &IOneLoginSDK_ListActionValues_Call{Call: _e.mock.On("ListActionValues", actionValue)}
}

func (_c *IOneLoginSDK_ListActionValues_Call) Run(run func(actionValue string)) *IOneLoginSDK_ListActionValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_ListActionValues_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListActionValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListActionValues_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_ListActionValues_Call {
	_c.Call.Return(run)
	return _c
}

// ListActions provides a mock function with given fields:
func (_m *IOneLoginSDK) ListActions() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListActions")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActions'
type IOneLoginSDK_ListActions_Call struct {
	*mock.Call
}

// ListActions is a helper method to define mock.On call
func (_e *IOneLoginSDK_Expecter) ListActions() *IOneLoginSDK_ListActions_Call {
	return &IOneLoginSDK_ListActions_Call{Call: _e.mock.On("ListActions")}
}

func (_c *IOneLoginSDK_ListActions_Call) Run(run func()) *IOneLoginSDK_ListActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOneLoginSDK_ListActions_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListActions_Call) RunAndReturn(run func() (interface{}, error)) *IOneLoginSDK_ListActions_Call {
	_c.Call.Return(run)
	return _c
}

// ListConditionOperators provides a mock function with given fields: conditionValue
func (_m *IOneLoginSDK) ListConditionOperators(conditionValue string) (interface{}, error) {
	ret := _m.Called(conditionValue)

	if len(ret) == 0 {
		panic("no return value specified for ListConditionOperators")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(conditionValue)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(conditionValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(conditionValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListConditionOperators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConditionOperators'
type IOneLoginSDK_ListConditionOperators_Call struct {
	*mock.Call
}

// ListConditionOperators is a helper method to define mock.On call
//   - conditionValue string
func (_e *IOneLoginSDK_Expecter) ListConditionOperators(conditionValue interface{}) *IOneLoginSDK_ListConditionOperators_Call {
	return &IOneLoginSDK_ListConditionOperators_Call{Call: _e.mock.On("ListConditionOperators", conditionValue)}
}

func (_c *IOneLoginSDK_ListConditionOperators_Call) Run(run func(conditionValue string)) *IOneLoginSDK_ListConditionOperators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_ListConditionOperators_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListConditionOperators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListConditionOperators_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_ListConditionOperators_Call {
	_c.Call.Return(run)
	return _c
}

// ListConditionValues provides a mock function with given fields: conditionValue
func (_m *IOneLoginSDK) ListConditionValues(conditionValue string) (interface{}, error) {
	ret := _m.Called(conditionValue)

	if len(ret) == 0 {
		panic("no return value specified for ListConditionValues")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(conditionValue)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(conditionValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(conditionValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListConditionValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConditionValues'
type IOneLoginSDK_ListConditionValues_Call struct {
	*mock.Call
}

// ListConditionValues is a helper method to define mock.On call
//   - conditionValue string
func (_e *IOneLoginSDK_Expecter) ListConditionValues(conditionValue interface{}) *IOneLoginSDK_ListConditionValues_Call {
	return &IOneLoginSDK_ListConditionValues_Call{Call: _e.mock.On("ListConditionValues", conditionValue)}
}

func (_c *IOneLoginSDK_ListConditionValues_Call) Run(run func(conditionValue string)) *IOneLoginSDK_ListConditionValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_ListConditionValues_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListConditionValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListConditionValues_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_ListConditionValues_Call {
	_c.Call.Return(run)
	return _c
}

// ListConditions provides a mock function with given fields:
func (_m *IOneLoginSDK) ListConditions() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListConditions")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListConditions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConditions'
type IOneLoginSDK_ListConditions_Call struct {
	*mock.Call
}

// ListConditions is a helper method to define mock.On call
func (_e *IOneLoginSDK_Expecter) ListConditions() *IOneLoginSDK_ListConditions_Call {
	return &IOneLoginSDK_ListConditions_Call{Call: _e.mock.On("ListConditions")}
}

func (_c *IOneLoginSDK_ListConditions_Call) Run(run func()) *IOneLoginSDK_ListConditions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOneLoginSDK_ListConditions_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListConditions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListConditions_Call) RunAndReturn(run func() (interface{}, error)) *IOneLoginSDK_ListConditions_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectors provides a mock function with given fields:
func (_m *IOneLoginSDK) ListConnectors() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectors'
type IOneLoginSDK_ListConnectors_Call struct {
	*mock.Call
}

// ListConnectors is a helper method to define mock.On call
func (_e *IOneLoginSDK_Expecter) ListConnectors() *IOneLoginSDK_ListConnectors_Call {
	return &IOneLoginSDK_ListConnectors_Call{Call: _e.mock.On("ListConnectors")}
}

func (_c *IOneLoginSDK_ListConnectors_Call) Run(run func()) *IOneLoginSDK_ListConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOneLoginSDK_ListConnectors_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListConnectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListConnectors_Call) RunAndReturn(run func() (interface{}, error)) *IOneLoginSDK_ListConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// ListEnvironmentVariables provides a mock function with given fields:
func (_m *IOneLoginSDK) ListEnvironmentVariables() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentVariables")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListEnvironmentVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEnvironmentVariables'
type IOneLoginSDK_ListEnvironmentVariables_Call struct {
	*mock.Call
}

// ListEnvironmentVariables is a helper method to define mock.On call
func (_e *IOneLoginSDK_Expecter) ListEnvironmentVariables() *IOneLoginSDK_ListEnvironmentVariables_Call {
	return &IOneLoginSDK_ListEnvironmentVariables_Call{Call: _e.mock.On("ListEnvironmentVariables")}
}

func (_c *IOneLoginSDK_ListEnvironmentVariables_Call) Run(run func()) *IOneLoginSDK_ListEnvironmentVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOneLoginSDK_ListEnvironmentVariables_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListEnvironmentVariables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListEnvironmentVariables_Call) RunAndReturn(run func() (interface{}, error)) *IOneLoginSDK_ListEnvironmentVariables_Call {
	_c.Call.Return(run)
	return _c
}

// ListHooks provides a mock function with given fields: query
func (_m *IOneLoginSDK) ListHooks(query models.Queryable) (interface{}, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for ListHooks")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Queryable) (interface{}, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(models.Queryable) interface{}); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.Queryable) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListHooks'
type IOneLoginSDK_ListHooks_Call struct {
	*mock.Call
}

// ListHooks is a helper method to define mock.On call
//   - query models.Queryable
func (_e *IOneLoginSDK_Expecter) ListHooks(query interface{}) *IOneLoginSDK_ListHooks_Call {
	return &IOneLoginSDK_ListHooks_Call{Call: _e.mock.On("ListHooks", query)}
}

func (_c *IOneLoginSDK_ListHooks_Call) Run(run func(query models.Queryable)) *IOneLoginSDK_ListHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_ListHooks_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListHooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListHooks_Call) RunAndReturn(run func(models.Queryable) (interface{}, error)) *IOneLoginSDK_ListHooks_Call {
	_c.Call.Return(run)
	return _c
}

// ListMappings provides a mock function with given fields:
func (_m *IOneLoginSDK) ListMappings() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListMappings")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMappings'
type IOneLoginSDK_ListMappings_Call struct {
	*mock.Call
}

// ListMappings is a helper method to define mock.On call
func (_e *IOneLoginSDK_Expecter) ListMappings() *IOneLoginSDK_ListMappings_Call {
	return &IOneLoginSDK_ListMappings_Call{Call: _e.mock.On("ListMappings")}
}

func (_c *IOneLoginSDK_ListMappings_Call) Run(run func()) *IOneLoginSDK_ListMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOneLoginSDK_ListMappings_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListMappings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListMappings_Call) RunAndReturn(run func() (interface{}, error)) *IOneLoginSDK_ListMappings_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivileges provides a mock function with given fields: queryParams
func (_m *IOneLoginSDK) ListPrivileges(queryParams models.Queryable) (interface{}, error) {
	ret := _m.Called(queryParams)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivileges")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Queryable) (interface{}, error)); ok {
		return rf(queryParams)
	}
	if rf, ok := ret.Get(0).(func(models.Queryable) interface{}); ok {
		r0 = rf(queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.Queryable) error); ok {
		r1 = rf(queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_ListPrivileges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivileges'
type IOneLoginSDK_ListPrivileges_Call struct {
	*mock.Call
}

// ListPrivileges is a helper method to define mock.On call
//   - queryParams models.Queryable
func (_e *IOneLoginSDK_Expecter) ListPrivileges(queryParams interface{}) *IOneLoginSDK_ListPrivileges_Call {
	return &IOneLoginSDK_ListPrivileges_Call{Call: _e.mock.On("ListPrivileges", queryParams)}
}

func (_c *IOneLoginSDK_ListPrivileges_Call) Run(run func(queryParams models.Queryable)) *IOneLoginSDK_ListPrivileges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Queryable))
	})
	return _c
}

func (_c *IOneLoginSDK_ListPrivileges_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_ListPrivileges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_ListPrivileges_Call) RunAndReturn(run func(models.Queryable) (interface{}, error)) *IOneLoginSDK_ListPrivileges_Call {
	_c.Call.Return(run)
	return _c
}

// LockUserAccount provides a mock function with given fields: id
func (_m *IOneLoginSDK) LockUserAccount(id int) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for LockUserAccount")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_LockUserAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockUserAccount'
type IOneLoginSDK_LockUserAccount_Call struct {
	*mock.Call
}

// LockUserAccount is a helper method to define mock.On call
//   - id int
func (_e *IOneLoginSDK_Expecter) LockUserAccount(id interface{}) *IOneLoginSDK_LockUserAccount_Call {
	return &IOneLoginSDK_LockUserAccount_Call{Call: _e.mock.On("LockUserAccount", id)}
}

func (_c *IOneLoginSDK_LockUserAccount_Call) Run(run func(id int)) *IOneLoginSDK_LockUserAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_LockUserAccount_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_LockUserAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_LockUserAccount_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_LockUserAccount_Call {
	_c.Call.Return(run)
	return _c
}

// LogOutUser provides a mock function with given fields: userID
func (_m *IOneLoginSDK) LogOutUser(userID int) (interface{}, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for LogOutUser")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_LogOutUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogOutUser'
type IOneLoginSDK_LogOutUser_Call struct {
	*mock.Call
}

// LogOutUser is a helper method to define mock.On call
//   - userID int
func (_e *IOneLoginSDK_Expecter) LogOutUser(userID interface{}) *IOneLoginSDK_LogOutUser_Call {
	return &IOneLoginSDK_LogOutUser_Call{Call: _e.mock.On("LogOutUser", userID)}
}

func (_c *IOneLoginSDK_LogOutUser_Call) Run(run func(userID int)) *IOneLoginSDK_LogOutUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_LogOutUser_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_LogOutUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_LogOutUser_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_LogOutUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMFAFactor provides a mock function with given fields: userID, deviceID
func (_m *IOneLoginSDK) RemoveMFAFactor(userID int, deviceID int) (interface{}, error) {
	ret := _m.Called(userID, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMFAFactor")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (interface{}, error)); ok {
		return rf(userID, deviceID)
	}
	if rf, ok := ret.Get(0).(func(int, int) interface{}); ok {
		r0 = rf(userID, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_RemoveMFAFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMFAFactor'
type IOneLoginSDK_RemoveMFAFactor_Call struct {
	*mock.Call
}

// RemoveMFAFactor is a helper method to define mock.On call
//   - userID int
//   - deviceID int
func (_e *IOneLoginSDK_Expecter) RemoveMFAFactor(userID interface{}, deviceID interface{}) *IOneLoginSDK_RemoveMFAFactor_Call {
	return &IOneLoginSDK_RemoveMFAFactor_Call{Call: _e.mock.On("RemoveMFAFactor", userID, deviceID)}
}

func (_c *IOneLoginSDK_RemoveMFAFactor_Call) Run(run func(userID int, deviceID int)) *IOneLoginSDK_RemoveMFAFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_RemoveMFAFactor_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_RemoveMFAFactor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_RemoveMFAFactor_Call) RunAndReturn(run func(int, int) (interface{}, error)) *IOneLoginSDK_RemoveMFAFactor_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePrivilegeFromUser provides a mock function with given fields: privilegeID, userID
func (_m *IOneLoginSDK) RemovePrivilegeFromUser(privilegeID string, userID int) (interface{}, error) {
	ret := _m.Called(privilegeID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePrivilegeFromUser")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (interface{}, error)); ok {
		return rf(privilegeID, userID)
	}
	if rf, ok := ret.Get(0).(func(string, int) interface{}); ok {
		r0 = rf(privilegeID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(privilegeID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_RemovePrivilegeFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePrivilegeFromUser'
type IOneLoginSDK_RemovePrivilegeFromUser_Call struct {
	*mock.Call
}

// RemovePrivilegeFromUser is a helper method to define mock.On call
//   - privilegeID string
//   - userID int
func (_e *IOneLoginSDK_Expecter) RemovePrivilegeFromUser(privilegeID interface{}, userID interface{}) *IOneLoginSDK_RemovePrivilegeFromUser_Call {
	return &IOneLoginSDK_RemovePrivilegeFromUser_Call{Call: _e.mock.On("RemovePrivilegeFromUser", privilegeID, userID)}
}

func (_c *IOneLoginSDK_RemovePrivilegeFromUser_Call) Run(run func(privilegeID string, userID int)) *IOneLoginSDK_RemovePrivilegeFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_RemovePrivilegeFromUser_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_RemovePrivilegeFromUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_RemovePrivilegeFromUser_Call) RunAndReturn(run func(string, int) (interface{}, error)) *IOneLoginSDK_RemovePrivilegeFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserRole provides a mock function with given fields: userID
func (_m *IOneLoginSDK) RemoveUserRole(userID int) (interface{}, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserRole")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_RemoveUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserRole'
type IOneLoginSDK_RemoveUserRole_Call struct {
	*mock.Call
}

// RemoveUserRole is a helper method to define mock.On call
//   - userID int
func (_e *IOneLoginSDK_Expecter) RemoveUserRole(userID interface{}) *IOneLoginSDK_RemoveUserRole_Call {
	return &IOneLoginSDK_RemoveUserRole_Call{Call: _e.mock.On("RemoveUserRole", userID)}
}

func (_c *IOneLoginSDK_RemoveUserRole_Call) Run(run func(userID int)) *IOneLoginSDK_RemoveUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_RemoveUserRole_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_RemoveUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_RemoveUserRole_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_RemoveUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// SendInviteLink provides a mock function with given fields: email
func (_m *IOneLoginSDK) SendInviteLink(email string) (interface{}, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for SendInviteLink")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_SendInviteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInviteLink'
type IOneLoginSDK_SendInviteLink_Call struct {
	*mock.Call
}

// SendInviteLink is a helper method to define mock.On call
//   - email string
func (_e *IOneLoginSDK_Expecter) SendInviteLink(email interface{}) *IOneLoginSDK_SendInviteLink_Call {
	return &IOneLoginSDK_SendInviteLink_Call{Call: _e.mock.On("SendInviteLink", email)}
}

func (_c *IOneLoginSDK_SendInviteLink_Call) Run(run func(email string)) *IOneLoginSDK_SendInviteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_SendInviteLink_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_SendInviteLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_SendInviteLink_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_SendInviteLink_Call {
	_c.Call.Return(run)
	return _c
}

// SetCustomAttributes provides a mock function with given fields: userID, attr
func (_m *IOneLoginSDK) SetCustomAttributes(userID int, attr interface{}) (interface{}, error) {
	ret := _m.Called(userID, attr)

	if len(ret) == 0 {
		panic("no return value specified for SetCustomAttributes")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, interface{}) (interface{}, error)); ok {
		return rf(userID, attr)
	}
	if rf, ok := ret.Get(0).(func(int, interface{}) interface{}); ok {
		r0 = rf(userID, attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, interface{}) error); ok {
		r1 = rf(userID, attr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_SetCustomAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCustomAttributes'
type IOneLoginSDK_SetCustomAttributes_Call struct {
	*mock.Call
}

// SetCustomAttributes is a helper method to define mock.On call
//   - userID int
//   - attr interface{}
func (_e *IOneLoginSDK_Expecter) SetCustomAttributes(userID interface{}, attr interface{}) *IOneLoginSDK_SetCustomAttributes_Call {
	return &IOneLoginSDK_SetCustomAttributes_Call{Call: _e.mock.On("SetCustomAttributes", userID, attr)}
}

func (_c *IOneLoginSDK_SetCustomAttributes_Call) Run(run func(userID int, attr interface{})) *IOneLoginSDK_SetCustomAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *IOneLoginSDK_SetCustomAttributes_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_SetCustomAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_SetCustomAttributes_Call) RunAndReturn(run func(int, interface{}) (interface{}, error)) *IOneLoginSDK_SetCustomAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserState provides a mock function with given fields: userID, state
func (_m *IOneLoginSDK) SetUserState(userID int, state int) (interface{}, error) {
	ret := _m.Called(userID, state)

	if len(ret) == 0 {
		panic("no return value specified for SetUserState")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (interface{}, error)); ok {
		return rf(userID, state)
	}
	if rf, ok := ret.Get(0).(func(int, int) interface{}); ok {
		r0 = rf(userID, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_SetUserState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserState'
type IOneLoginSDK_SetUserState_Call struct {
	*mock.Call
}

// SetUserState is a helper method to define mock.On call
//   - userID int
//   - state int
func (_e *IOneLoginSDK_Expecter) SetUserState(userID interface{}, state interface{}) *IOneLoginSDK_SetUserState_Call {
	return &IOneLoginSDK_SetUserState_Call{Call: _e.mock.On("SetUserState", userID, state)}
}

func (_c *IOneLoginSDK_SetUserState_Call) Run(run func(userID int, state int)) *IOneLoginSDK_SetUserState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_SetUserState_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_SetUserState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_SetUserState_Call) RunAndReturn(run func(int, int) (interface{}, error)) *IOneLoginSDK_SetUserState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApp provides a mock function with given fields: id, app
func (_m *IOneLoginSDK) UpdateApp(id int, app models.App) (interface{}, error) {
	ret := _m.Called(id, app)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApp")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.App) (interface{}, error)); ok {
		return rf(id, app)
	}
	if rf, ok := ret.Get(0).(func(int, models.App) interface{}); ok {
		r0 = rf(id, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.App) error); ok {
		r1 = rf(id, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApp'
type IOneLoginSDK_UpdateApp_Call struct {
	*mock.Call
}

// UpdateApp is a helper method to define mock.On call
//   - id int
//   - app models.App
func (_e *IOneLoginSDK_Expecter) UpdateApp(id interface{}, app interface{}) *IOneLoginSDK_UpdateApp_Call {
	return &IOneLoginSDK_UpdateApp_Call{Call: _e.mock.On("UpdateApp", id, app)}
}

func (_c *IOneLoginSDK_UpdateApp_Call) Run(run func(id int, app models.App)) *IOneLoginSDK_UpdateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.App))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateApp_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateApp_Call) RunAndReturn(run func(int, models.App) (interface{}, error)) *IOneLoginSDK_UpdateApp_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAppRule provides a mock function with given fields: id, ruleID, appRule, queryParams
func (_m *IOneLoginSDK) UpdateAppRule(id int, ruleID int, appRule models.AppRule, queryParams map[string]string) (interface{}, error) {
	ret := _m.Called(id, ruleID, appRule, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppRule")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, models.AppRule, map[string]string) (interface{}, error)); ok {
		return rf(id, ruleID, appRule, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, int, models.AppRule, map[string]string) interface{}); ok {
		r0 = rf(id, ruleID, appRule, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, models.AppRule, map[string]string) error); ok {
		r1 = rf(id, ruleID, appRule, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateAppRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAppRule'
type IOneLoginSDK_UpdateAppRule_Call struct {
	*mock.Call
}

// UpdateAppRule is a helper method to define mock.On call
//   - id int
//   - ruleID int
//   - appRule models.AppRule
//   - queryParams map[string]string
func (_e *IOneLoginSDK_Expecter) UpdateAppRule(id interface{}, ruleID interface{}, appRule interface{}, queryParams interface{}) *IOneLoginSDK_UpdateAppRule_Call {
	return &IOneLoginSDK_UpdateAppRule_Call{Call: _e.mock.On("UpdateAppRule", id, ruleID, appRule, queryParams)}
}

func (_c *IOneLoginSDK_UpdateAppRule_Call) Run(run func(id int, ruleID int, appRule models.AppRule, queryParams map[string]string)) *IOneLoginSDK_UpdateAppRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(models.AppRule), args[3].(map[string]string))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateAppRule_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateAppRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateAppRule_Call) RunAndReturn(run func(int, int, models.AppRule, map[string]string) (interface{}, error)) *IOneLoginSDK_UpdateAppRule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthServer provides a mock function with given fields: id, authServer
func (_m *IOneLoginSDK) UpdateAuthServer(id int, authServer models.AuthServer) (interface{}, error) {
	ret := _m.Called(id, authServer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthServer")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.AuthServer) (interface{}, error)); ok {
		return rf(id, authServer)
	}
	if rf, ok := ret.Get(0).(func(int, models.AuthServer) interface{}); ok {
		r0 = rf(id, authServer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.AuthServer) error); ok {
		r1 = rf(id, authServer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateAuthServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthServer'
type IOneLoginSDK_UpdateAuthServer_Call struct {
	*mock.Call
}

// UpdateAuthServer is a helper method to define mock.On call
//   - id int
//   - authServer models.AuthServer
func (_e *IOneLoginSDK_Expecter) UpdateAuthServer(id interface{}, authServer interface{}) *IOneLoginSDK_UpdateAuthServer_Call {
	return &IOneLoginSDK_UpdateAuthServer_Call{Call: _e.mock.On("UpdateAuthServer", id, authServer)}
}

func (_c *IOneLoginSDK_UpdateAuthServer_Call) Run(run func(id int, authServer models.AuthServer)) *IOneLoginSDK_UpdateAuthServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.AuthServer))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateAuthServer_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateAuthServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateAuthServer_Call) RunAndReturn(run func(int, models.AuthServer) (interface{}, error)) *IOneLoginSDK_UpdateAuthServer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthServerScope provides a mock function with given fields: id, scopeID, scope
func (_m *IOneLoginSDK) UpdateAuthServerScope(id int, scopeID int, scope models.Scope) (interface{}, error) {
	ret := _m.Called(id, scopeID, scope)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthServerScope")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, models.Scope) (interface{}, error)); ok {
		return rf(id, scopeID, scope)
	}
	if rf, ok := ret.Get(0).(func(int, int, models.Scope) interface{}); ok {
		r0 = rf(id, scopeID, scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, models.Scope) error); ok {
		r1 = rf(id, scopeID, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateAuthServerScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthServerScope'
type IOneLoginSDK_UpdateAuthServerScope_Call struct {
	*mock.Call
}

// UpdateAuthServerScope is a helper method to define mock.On call
//   - id int
//   - scopeID int
//   - scope models.Scope
func (_e *IOneLoginSDK_Expecter) UpdateAuthServerScope(id interface{}, scopeID interface{}, scope interface{}) *IOneLoginSDK_UpdateAuthServerScope_Call {
	return &IOneLoginSDK_UpdateAuthServerScope_Call{Call: _e.mock.On("UpdateAuthServerScope", id, scopeID, scope)}
}

func (_c *IOneLoginSDK_UpdateAuthServerScope_Call) Run(run func(id int, scopeID int, scope models.Scope)) *IOneLoginSDK_UpdateAuthServerScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(models.Scope))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateAuthServerScope_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateAuthServerScope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateAuthServerScope_Call) RunAndReturn(run func(int, int, models.Scope) (interface{}, error)) *IOneLoginSDK_UpdateAuthServerScope_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClaim provides a mock function with given fields: id, claimID, claim
func (_m *IOneLoginSDK) UpdateClaim(id int, claimID int, claim models.AccessTokenClaim) (interface{}, error) {
	ret := _m.Called(id, claimID, claim)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClaim")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, models.AccessTokenClaim) (interface{}, error)); ok {
		return rf(id, claimID, claim)
	}
	if rf, ok := ret.Get(0).(func(int, int, models.AccessTokenClaim) interface{}); ok {
		r0 = rf(id, claimID, claim)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, models.AccessTokenClaim) error); ok {
		r1 = rf(id, claimID, claim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClaim'
type IOneLoginSDK_UpdateClaim_Call struct {
	*mock.Call
}

// UpdateClaim is a helper method to define mock.On call
//   - id int
//   - claimID int
//   - claim models.AccessTokenClaim
func (_e *IOneLoginSDK_Expecter) UpdateClaim(id interface{}, claimID interface{}, claim interface{}) *IOneLoginSDK_UpdateClaim_Call {
	return &IOneLoginSDK_UpdateClaim_Call{Call: _e.mock.On("UpdateClaim", id, claimID, claim)}
}

func (_c *IOneLoginSDK_UpdateClaim_Call) Run(run func(id int, claimID int, claim models.AccessTokenClaim)) *IOneLoginSDK_UpdateClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(models.AccessTokenClaim))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateClaim_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateClaim_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateClaim_Call) RunAndReturn(run func(int, int, models.AccessTokenClaim) (interface{}, error)) *IOneLoginSDK_UpdateClaim_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientApp provides a mock function with given fields: id, clientID, clientApp
func (_m *IOneLoginSDK) UpdateClientApp(id int, clientID int, clientApp models.ClientApp) (interface{}, error) {
	ret := _m.Called(id, clientID, clientApp)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientApp")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, models.ClientApp) (interface{}, error)); ok {
		return rf(id, clientID, clientApp)
	}
	if rf, ok := ret.Get(0).(func(int, int, models.ClientApp) interface{}); ok {
		r0 = rf(id, clientID, clientApp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, models.ClientApp) error); ok {
		r1 = rf(id, clientID, clientApp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateClientApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientApp'
type IOneLoginSDK_UpdateClientApp_Call struct {
	*mock.Call
}

// UpdateClientApp is a helper method to define mock.On call
//   - id int
//   - clientID int
//   - clientApp models.ClientApp
func (_e *IOneLoginSDK_Expecter) UpdateClientApp(id interface{}, clientID interface{}, clientApp interface{}) *IOneLoginSDK_UpdateClientApp_Call {
	return &IOneLoginSDK_UpdateClientApp_Call{Call: _e.mock.On("UpdateClientApp", id, clientID, clientApp)}
}

func (_c *IOneLoginSDK_UpdateClientApp_Call) Run(run func(id int, clientID int, clientApp models.ClientApp)) *IOneLoginSDK_UpdateClientApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(models.ClientApp))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateClientApp_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateClientApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateClientApp_Call) RunAndReturn(run func(int, int, models.ClientApp) (interface{}, error)) *IOneLoginSDK_UpdateClientApp_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEnvironmentVariable provides a mock function with given fields: envVarID, name, value
func (_m *IOneLoginSDK) UpdateEnvironmentVariable(envVarID int, name string, value string) (interface{}, error) {
	ret := _m.Called(envVarID, name, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironmentVariable")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, string) (interface{}, error)); ok {
		return rf(envVarID, name, value)
	}
	if rf, ok := ret.Get(0).(func(int, string, string) interface{}); ok {
		r0 = rf(envVarID, name, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(envVarID, name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateEnvironmentVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEnvironmentVariable'
type IOneLoginSDK_UpdateEnvironmentVariable_Call struct {
	*mock.Call
}

// UpdateEnvironmentVariable is a helper method to define mock.On call
//   - envVarID int
//   - name string
//   - value string
func (_e *IOneLoginSDK_Expecter) UpdateEnvironmentVariable(envVarID interface{}, name interface{}, value interface{}) *IOneLoginSDK_UpdateEnvironmentVariable_Call {
	return &IOneLoginSDK_UpdateEnvironmentVariable_Call{Call: _e.mock.On("UpdateEnvironmentVariable", envVarID, name, value)}
}

func (_c *IOneLoginSDK_UpdateEnvironmentVariable_Call) Run(run func(envVarID int, name string, value string)) *IOneLoginSDK_UpdateEnvironmentVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateEnvironmentVariable_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateEnvironmentVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateEnvironmentVariable_Call) RunAndReturn(run func(int, string, string) (interface{}, error)) *IOneLoginSDK_UpdateEnvironmentVariable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMapping provides a mock function with given fields: mappingID
func (_m *IOneLoginSDK) UpdateMapping(mappingID int) (interface{}, error) {
	ret := _m.Called(mappingID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMapping")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(mappingID)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(mappingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(mappingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMapping'
type IOneLoginSDK_UpdateMapping_Call struct {
	*mock.Call
}

// UpdateMapping is a helper method to define mock.On call
//   - mappingID int
func (_e *IOneLoginSDK_Expecter) UpdateMapping(mappingID interface{}) *IOneLoginSDK_UpdateMapping_Call {
	return &IOneLoginSDK_UpdateMapping_Call{Call: _e.mock.On("UpdateMapping", mappingID)}
}

func (_c *IOneLoginSDK_UpdateMapping_Call) Run(run func(mappingID int)) *IOneLoginSDK_UpdateMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateMapping_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateMapping_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_UpdateMapping_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePasswordInsecure provides a mock function with given fields: id
func (_m *IOneLoginSDK) UpdatePasswordInsecure(id int) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePasswordInsecure")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdatePasswordInsecure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePasswordInsecure'
type IOneLoginSDK_UpdatePasswordInsecure_Call struct {
	*mock.Call
}

// UpdatePasswordInsecure is a helper method to define mock.On call
//   - id int
func (_e *IOneLoginSDK_Expecter) UpdatePasswordInsecure(id interface{}) *IOneLoginSDK_UpdatePasswordInsecure_Call {
	return &IOneLoginSDK_UpdatePasswordInsecure_Call{Call: _e.mock.On("UpdatePasswordInsecure", id)}
}

func (_c *IOneLoginSDK_UpdatePasswordInsecure_Call) Run(run func(id int)) *IOneLoginSDK_UpdatePasswordInsecure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdatePasswordInsecure_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdatePasswordInsecure_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdatePasswordInsecure_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_UpdatePasswordInsecure_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePasswordSecure provides a mock function with given fields: id
func (_m *IOneLoginSDK) UpdatePasswordSecure(id int) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePasswordSecure")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdatePasswordSecure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePasswordSecure'
type IOneLoginSDK_UpdatePasswordSecure_Call struct {
	*mock.Call
}

// UpdatePasswordSecure is a helper method to define mock.On call
//   - id int
func (_e *IOneLoginSDK_Expecter) UpdatePasswordSecure(id interface{}) *IOneLoginSDK_UpdatePasswordSecure_Call {
	return &IOneLoginSDK_UpdatePasswordSecure_Call{Call: _e.mock.On("UpdatePasswordSecure", id)}
}

func (_c *IOneLoginSDK_UpdatePasswordSecure_Call) Run(run func(id int)) *IOneLoginSDK_UpdatePasswordSecure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdatePasswordSecure_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdatePasswordSecure_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdatePasswordSecure_Call) RunAndReturn(run func(int) (interface{}, error)) *IOneLoginSDK_UpdatePasswordSecure_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePrivilege provides a mock function with given fields: privilegeID
func (_m *IOneLoginSDK) UpdatePrivilege(privilegeID string) (interface{}, error) {
	ret := _m.Called(privilegeID)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrivilege")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(privilegeID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(privilegeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(privilegeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdatePrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePrivilege'
type IOneLoginSDK_UpdatePrivilege_Call struct {
	*mock.Call
}

// UpdatePrivilege is a helper method to define mock.On call
//   - privilegeID string
func (_e *IOneLoginSDK_Expecter) UpdatePrivilege(privilegeID interface{}) *IOneLoginSDK_UpdatePrivilege_Call {
	return &IOneLoginSDK_UpdatePrivilege_Call{Call: _e.mock.On("UpdatePrivilege", privilegeID)}
}

func (_c *IOneLoginSDK_UpdatePrivilege_Call) Run(run func(privilegeID string)) *IOneLoginSDK_UpdatePrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdatePrivilege_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdatePrivilege_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdatePrivilege_Call) RunAndReturn(run func(string) (interface{}, error)) *IOneLoginSDK_UpdatePrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: id, role, queryParams
func (_m *IOneLoginSDK) UpdateRole(id int, role models.Role, queryParams map[string]string) (interface{}, error) {
	ret := _m.Called(id, role, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Role, map[string]string) (interface{}, error)); ok {
		return rf(id, role, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, models.Role, map[string]string) interface{}); ok {
		r0 = rf(id, role, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.Role, map[string]string) error); ok {
		r1 = rf(id, role, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type IOneLoginSDK_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - id int
//   - role models.Role
//   - queryParams map[string]string
func (_e *IOneLoginSDK_Expecter) UpdateRole(id interface{}, role interface{}, queryParams interface{}) *IOneLoginSDK_UpdateRole_Call {
	return &IOneLoginSDK_UpdateRole_Call{Call: _e.mock.On("UpdateRole", id, role, queryParams)}
}

func (_c *IOneLoginSDK_UpdateRole_Call) Run(run func(id int, role models.Role, queryParams map[string]string)) *IOneLoginSDK_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.Role), args[2].(map[string]string))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateRole_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateRole_Call) RunAndReturn(run func(int, models.Role, map[string]string) (interface{}, error)) *IOneLoginSDK_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleApps provides a mock function with given fields: roleID, apps
func (_m *IOneLoginSDK) UpdateRoleApps(roleID int, apps []int) (interface{}, error) {
	ret := _m.Called(roleID, apps)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleApps")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []int) (interface{}, error)); ok {
		return rf(roleID, apps)
	}
	if rf, ok := ret.Get(0).(func(int, []int) interface{}); ok {
		r0 = rf(roleID, apps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, []int) error); ok {
		r1 = rf(roleID, apps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateRoleApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleApps'
type IOneLoginSDK_UpdateRoleApps_Call struct {
	*mock.Call
}

// UpdateRoleApps is a helper method to define mock.On call
//   - roleID int
//   - apps []int
func (_e *IOneLoginSDK_Expecter) UpdateRoleApps(roleID interface{}, apps interface{}) *IOneLoginSDK_UpdateRoleApps_Call {
	return &IOneLoginSDK_UpdateRoleApps_Call{Call: _e.mock.On("UpdateRoleApps", roleID, apps)}
}

func (_c *IOneLoginSDK_UpdateRoleApps_Call) Run(run func(roleID int, apps []int)) *IOneLoginSDK_UpdateRoleApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]int))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateRoleApps_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateRoleApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateRoleApps_Call) RunAndReturn(run func(int, []int) (interface{}, error)) *IOneLoginSDK_UpdateRoleApps_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSmartHook provides a mock function with given fields: hookID, hook
func (_m *IOneLoginSDK) UpdateSmartHook(hookID int, hook models.SmartHook) (interface{}, error) {
	ret := _m.Called(hookID, hook)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSmartHook")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.SmartHook) (interface{}, error)); ok {
		return rf(hookID, hook)
	}
	if rf, ok := ret.Get(0).(func(int, models.SmartHook) interface{}); ok {
		r0 = rf(hookID, hook)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.SmartHook) error); ok {
		r1 = rf(hookID, hook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateSmartHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSmartHook'
type IOneLoginSDK_UpdateSmartHook_Call struct {
	*mock.Call
}

// UpdateSmartHook is a helper method to define mock.On call
//   - hookID int
//   - hook models.SmartHook
func (_e *IOneLoginSDK_Expecter) UpdateSmartHook(hookID interface{}, hook interface{}) *IOneLoginSDK_UpdateSmartHook_Call {
	return &IOneLoginSDK_UpdateSmartHook_Call{Call: _e.mock.On("UpdateSmartHook", hookID, hook)}
}

func (_c *IOneLoginSDK_UpdateSmartHook_Call) Run(run func(hookID int, hook models.SmartHook)) *IOneLoginSDK_UpdateSmartHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.SmartHook))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateSmartHook_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateSmartHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateSmartHook_Call) RunAndReturn(run func(int, models.SmartHook) (interface{}, error)) *IOneLoginSDK_UpdateSmartHook_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: id, user
func (_m *IOneLoginSDK) UpdateUser(id int, user models.User) (interface{}, error) {
	ret := _m.Called(id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.User) (interface{}, error)); ok {
		return rf(id, user)
	}
	if rf, ok := ret.Get(0).(func(int, models.User) interface{}); ok {
		r0 = rf(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, models.User) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type IOneLoginSDK_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - id int
//   - user models.User
func (_e *IOneLoginSDK_Expecter) UpdateUser(id interface{}, user interface{}) *IOneLoginSDK_UpdateUser_Call {
	return &IOneLoginSDK_UpdateUser_Call{Call: _e.mock.On("UpdateUser", id, user)}
}

func (_c *IOneLoginSDK_UpdateUser_Call) Run(run func(id int, user models.User)) *IOneLoginSDK_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.User))
	})
	return _c
}

func (_c *IOneLoginSDK_UpdateUser_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_UpdateUser_Call) RunAndReturn(run func(int, models.User) (interface{}, error)) *IOneLoginSDK_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyFactorSAML provides a mock function with given fields: request
func (_m *IOneLoginSDK) VerifyFactorSAML(request models.VerifyMFATokenRequest) (interface{}, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for VerifyFactorSAML")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.VerifyMFATokenRequest) (interface{}, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(models.VerifyMFATokenRequest) interface{}); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.VerifyMFATokenRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_VerifyFactorSAML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyFactorSAML'
type IOneLoginSDK_VerifyFactorSAML_Call struct {
	*mock.Call
}

// VerifyFactorSAML is a helper method to define mock.On call
//   - request models.VerifyMFATokenRequest
func (_e *IOneLoginSDK_Expecter) VerifyFactorSAML(request interface{}) *IOneLoginSDK_VerifyFactorSAML_Call {
	return &IOneLoginSDK_VerifyFactorSAML_Call{Call: _e.mock.On("VerifyFactorSAML", request)}
}

func (_c *IOneLoginSDK_VerifyFactorSAML_Call) Run(run func(request models.VerifyMFATokenRequest)) *IOneLoginSDK_VerifyFactorSAML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.VerifyMFATokenRequest))
	})
	return _c
}

func (_c *IOneLoginSDK_VerifyFactorSAML_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_VerifyFactorSAML_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_VerifyFactorSAML_Call) RunAndReturn(run func(models.VerifyMFATokenRequest) (interface{}, error)) *IOneLoginSDK_VerifyFactorSAML_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyMFAEnrollment provides a mock function with given fields: userID, registrationID, otp
func (_m *IOneLoginSDK) VerifyMFAEnrollment(userID int, registrationID int, otp int) (interface{}, error) {
	ret := _m.Called(userID, registrationID, otp)

	if len(ret) == 0 {
		panic("no return value specified for VerifyMFAEnrollment")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) (interface{}, error)); ok {
		return rf(userID, registrationID, otp)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) interface{}); ok {
		r0 = rf(userID, registrationID, otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(userID, registrationID, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOneLoginSDK_VerifyMFAEnrollment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyMFAEnrollment'
type IOneLoginSDK_VerifyMFAEnrollment_Call struct {
	*mock.Call
}

// VerifyMFAEnrollment is a helper method to define mock.On call
//   - userID int
//   - registrationID int
//   - otp int
func (_e *IOneLoginSDK_Expecter) VerifyMFAEnrollment(userID interface{}, registrationID interface{}, otp interface{}) *IOneLoginSDK_VerifyMFAEnrollment_Call {
	return &IOneLoginSDK_VerifyMFAEnrollment_Call{Call: _e.mock.On("VerifyMFAEnrollment", userID, registrationID, otp)}
}

func (_c *IOneLoginSDK_VerifyMFAEnrollment_Call) Run(run func(userID int, registrationID int, otp int)) *IOneLoginSDK_VerifyMFAEnrollment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *IOneLoginSDK_VerifyMFAEnrollment_Call) Return(_a0 interface{}, _a1 error) *IOneLoginSDK_VerifyMFAEnrollment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOneLoginSDK_VerifyMFAEnrollment_Call) RunAndReturn(run func(int, int, int) (interface{}, error)) *IOneLoginSDK_VerifyMFAEnrollment_Call {
	_c.Call.Return(run)
	return _c
}

// NewIOneLoginSDK creates a new instance of IOneLoginSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOneLoginSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOneLoginSDK {
	mock := &IOneLoginSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
